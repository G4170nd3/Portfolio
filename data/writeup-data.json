[
	{
        "Event-name": "CaptureTheWU-2023",
        "Event-logo": "/static/images/Writeups/CaptureTheWU-2023/logo.png",
        "Event-timeline": {
            "Start": "23/09/2023",
            "End": "24/09/2023"
        },
        "Event-sections": {
            "Crypto": [
                {
                    "Chall-head": "32",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Encrypt these phrases into Base32:"
                        },
                        {
                            "Type": "text",
                            "text": "I told my computer I needed a break, and now it's sending  me vacation ads for tropical circuits! My plant's therapist says it has deep-rooted issues. I guess that's what happens when you're always stuck in a pot. I used to play piano by ear, but now it's demanding royalties every time I hum a tune!"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Quite easy actually, the 'trickiest' part i would say, where i can bet my life on it, is that most of them got wrong was WHAT EXACTLY TO ENCRYPT? You encrypt the whole phrase? WRONG!, You divide it into two phrases and do multiple tries, WRONG! Until the admin team gave the hint, its three phrases, quite easy after that honestly. Just open up an online base encoder and you got it!"
                        },
                        {
                            "Type": "text",
                            "text": "The three phrases were:"
                        },
                        {
                            "Type": "text",
                            "text": "1. I told my computer I needed a break, and now it's sending me vacation ads for tropical circuits!"
                        },
                        {
                            "Type": "text",
                            "text": "2. My plant's therapist says it has deep-rooted issues. I guess that's what happens when you're always stuck in a pot."
                        },
                        {
                            "Type": "text",
                            "text": "3. I used to play piano by ear, but now it's demanding royalties every time I hum a tune!"
                        },
                        {
                            "Type": "heading",
                            "text": "Flags:"
                        },
                        {
                            "Type": "text",
                            "text": "1. JEQHI33MMQQG26JAMNXW24DVORSXEICJEBXGKZLEMVSCAYJAMJZGKYLLFQQGC3TEEBXG65ZANF2CO4ZAONSW4ZDJNZTSA3LFEB3GCY3BORUW63RAMFSHGIDGN5ZCA5DSN5YGSY3BNQQGG2LSMN2WS5DTEE======"
                        },
                        {
                            "Type": "text",
                            "text": "2. JV4SA4DMMFXHIJ3TEB2GQZLSMFYGS43UEBZWC6LTEBUXIIDIMFZSAZDFMVYC24TPN52GKZBANFZXG5LFOMXCASJAM52WK43TEB2GQYLUE5ZSA53IMF2CA2DBOBYGK3TTEB3WQZLOEB4W65JHOJSSAYLMO5QXS4ZAON2HKY3LEBUW4IDBEBYG65BO"
                        },
                        {
                            "Type": "text",
                            "text": "3. JEQHK43FMQQHI3ZAOBWGC6JAOBUWC3TPEBRHSIDFMFZCYIDCOV2CA3TPO4QGS5BHOMQGIZLNMFXGI2LOM4QHE33ZMFWHI2LFOMQGK5TFOJ4SA5DJNVSSASJANB2W2IDBEB2HK3TFEE======"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "2048",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Question: Our team has intercepted a message that has been encrypted. Can you decipher it?"
                        },
                        {
                            "Type": "text",
                            "text": "SkJTV1kzRFBGUVFHMjZKQU5aUVcyWkpBTkZaU0FTTE9ORlRXNklDTk41WEhJMzNaTUVXQ0E2TFBPVVFHVzJMTU5SU1dJSUROUEVRR01ZTFVOQlNYRUxCQU9CWkdLNERCT0pTU0E1RFBFQlNHU1pKTw=="
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "On first look it kinda looks like base64 so we check it in the cipher identifier tool, and as expected:"
                        },
                        {
                            "Type": "image",
                            "alt": "image showing given text is base64 encrypted",
                            "src": "/images/Writeups/CaptureTheWU-2023/Crypto/2048_0.PNG"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "We decode it from base64 and get:"
                        },
                        {
                            "Type": "code",
                            "text": "JBSWY3DPFQQG26JANZQW2ZJANFZSASLONFTW6ICNN5XHI33ZMEWCA6LPOUQGW2LMNRSWIIDNPEQGMYLUNBSXELBAOBZGK4DBOJSSA5DPEBSGSZJO"
                        },
                        {
                            "Type": "text",
                            "text": "...well, that does not look like the answer they are expecting (Stupid me tried and lost one attempt there)"
                        },
                        {
                            "Type": "text",
                            "text": "Maybe it's multiple layers encoded?"
                        },
                        {
                            "Type": "text",
                            "text": "We check it again against the cipher identifier and..."
                        },
                        {
                            "Type": "image",
                            "alt": "image showing the output is encrypted again maybe using base32",
                            "src": "/images/Writeups/CaptureTheWU-2023/Crypto/2048_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Well, that looks quite promising, we decode it through base32 and finally get what we were looking for (the flag ofc!)"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: Hello, my name is Inigo Montoya, you killed my father, prepare to die."
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "The Best Roman Emperor",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Someone delivered us an envelope with a hidden message, can you decipher it?"
                        },
                        {
                            "Type": "text",
                            "text": "'Uryyb Qnexarff, Zl Byq Sevraq'"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Roman Emperor? If you've read even the starting page of cryptography, the first thing that comes to mind reading this is 'Caesar cipher' ofc!"
                        },
                        {
                            "Type": "text",
                            "text": "Decode it using brute force, and we get the flag."
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: Hello Darkness, My Old Friend"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Forensics": [
                {
                    "Chall-head": "Word Search",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you find the hidden flag?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - WuLUG_Word_Search_2023.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The way I solved it, probably (definitely) not the way it was supposed to be solved."
                        },
                        {
                            "Type": "text",
                            "text": "Am I proud of it? Definitely! It was a blind shot and i wasn't expecting to find it, until i did lol"
                        },
                        {
                            "Type": "text",
                            "text": "How did I do it? My method :) Opening files on notepad!"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "First we unzip the file and we get a .docx file 'WuLUG Word Search 2023.docx' "
                        },
                        {
                            "Type": "text",
                            "text": "We look in it and there's a crossword puzzle in there. I don't have much knowledge about .docx files so I switched to my notepad-methodology."
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "We unzip the .docx file (Confused? Yeah these files can be unzipped as well, google about it, it's crazy awesome!) and get the various folders and files. Rest all was brute force from here."
                        },
                        {
                            "Type": "text",
                            "text": "Opening every file and looking for the flag prefix: 'CaptureTheWu' using the grep command, we finally got it inside word > document.xml"
                        },
                        {
                            "Type": "image",
                            "alt": "using cat with grep to get the flag from the file",
                            "src": "/images/Writeups/CaptureTheWU-2023/Forensics/WordSearch_0.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: CaptureTheWu-1809df72-8e96-485f-843b-2feec500a11f"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Waterfall",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you decode the hidden message?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - waterfall.wav"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "This question, not that difficult, took me HOURSS!!!"
                        },
                        {
                            "Type": "text",
                            "text": "Just because i was looking in the wrong direction."
                        },
                        {
                            "Type": "text",
                            "text": "Well, first of all, obviously, opening it up on notepad....that gets me nothing. :("
                        },
                        {
                            "Type": "text",
                            "text": "I tried what not, noise cancellation, maybe some low frequency morse code?, binwalk, stegseek, some other not so famous steg tools."
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Never forget this rule:"
                        },
                        {
                            "Type": "text",
                            "text": "ALWAYS check audio files through an audio tool!!! UGHH"
                        },
                        {
                            "Type": "text",
                            "text": "Downloaded Audacity, opened up the image, fidgeted through a few options and landed up on the spectrogram view, and there it was, literally 10 mins!! JESUS CHRIST!"
                        },
                        {
                            "Type": "text",
                            "text": "Just squint your eyes a little and you'll see it too"
                        },
                        {
                            "Type": "image",
                            "alt": "analysis of the audio file using audacity",
                            "src": "/images/Writeups/CaptureTheWU-2023/Forensics/Waterfall_0.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: E68A2A39"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "New Document",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "You've received what appears to be an errant email containing just a black word document from someone you know. Off the record however, they've suggested there's more to this document than meets the eye."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Document1.rtf"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "inline-text",
                            "text": "First of all, for those who don't know what .rtf files are, read this:"
                        },
                        {
                            "Type": "link",
                            "text": "Rich_Text_Format - Wikipedia",
                            "url": "https://en.wikipedia.org/wiki/Rich_Text_Format"
                        },
                        {
                            "Type": "text",
                            "text": "Secondly, we are not going to use any of that knowledge here :)"
                        },
                        {
                            "Type": "text",
                            "text": "I did what I do with any file on any CTF, open it up on a notepad :) "
                        },
                        {
                            "Type": "text",
                            "text": "We see a lot of (not required) text that has nothing to do with the flag, and we obv can't go through each sentence now right?"
                        },
                        {
                            "Type": "code",
                            "text": "Ctrl+F == Find"
                        },
                        {
                            "Type": "text",
                            "text": "We know the flag starts with the prefix: 'CaptureTheWu'"
                        },
                        {
                            "Type": "text",
                            "text": "And there we go..."
                        },
                        {
                            "Type": "image",
                            "alt": "finding text on the notepad file",
                            "src": "/images/Writeups/CaptureTheWU-2023/Forensics/NewDocument_0.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: CaptureTheWu-67d11fca-0a58-4b45-a63f-959af1255717"
                        },
                        {
                            "Type": "text",
                            "text": "(Again, this might not be the intended way to solve this, but i believe going through the notepad once is always worth it.)"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "EXtraterrestrial",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you find the hidden message?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - pleiades.TIF"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Now, a big disclaimer, I'm not sure the way I solved it was the intended way, but that is what I do with EVERY question containing a file of ANY type in a CTF. Open it up in the notepad :)"
                        },
                        {
                            "Type": "text",
                            "text": "You open it in the notepad and in the last line see the flag, eazzy-peezy"
                        },
                        {
                            "Type": "text",
                            "text": "(I'm sure there might be other (professional)(better)(using-some-tool) ways to solve it, but that how i did it.)"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: CaptureTheWu-bdfde5f1-f7e3-4501-8468-ee1996bd51c5"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Log Analysis": [
                {
                    "Chall-head": "File Transfer",
                    "Chall-cat": "Log Analysis",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you find the name of the file exfiltrated from the target host?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - ftp.pcap"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "That's a wireshark capture file so we first open it up on wireshark."
                        },
                        {
                            "Type": "image",
                            "alt": "pcap file on wireshark",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/FileTransfer_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Go to 'Statistics > Protocol Hierarchy' and we see the type of protocols used in the capture."
                        },
                        {
                            "Type": "image",
                            "alt": "wireshark protocol hierarchy showing distribution of packets",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/FileTransfer_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "FTP Data packets? Hmm, interesting"
                        },
                        {
                            "Type": "text",
                            "text": "Put up the display filter for 'ftp-data' and we see only 3 packets now"
                        },
                        {
                            "Type": "image",
                            "alt": "packets with the display filter",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/FileTransfer_2.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Upon further inspection we notice the following details:"
                        },
                        {
                            "Type": "text",
                            "text": "1. There are 2 files that were listed using the LIST command, COME_GET_ME.txt and passwords.txt"
                        },
                        {
                            "Type": "text",
                            "text": "2. Out of these two files, only the COME_GET_ME.txt file was retrieved using the RETR command, hence our answer!"
                        },
                        {
                            "Type": "image",
                            "alt": "screenshot showing passwords.txt file",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/FileTransfer_3.PNG"
                        },
                        {
                            "Type": "image",
                            "alt": "sceenshot showing content of the passwords.txt file",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/FileTransfer_4.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We needed the file name only, hence the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: COME_GET_ME"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Finally Got In",
                    "Chall-cat": "Log Analysis",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you find the successful login attempt? Password is the flag."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - web2.pcap"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "That's a wireshark capture file so we first open it up on wireshark."
                        },
                        {
                            "Type": "image",
                            "alt": "pcap file on wireshark",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/FinallyGotIn_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "The challenge talks about login data being sent, we apply the display filter for HTTP and sort the 'Info' section to take a look on the packets with 'POST' headers only (Since login data would be in a POST request)"
                        },
                        {
                            "Type": "text",
                            "text": "Right Click on any packet > Follow > TCP Stream and we see the response to that request as well. We iterated through the 5 packets until we found the one that successfully logs in the user."
                        },
                        {
                            "Type": "image",
                            "alt": "the POST packet that logged in the user",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/FinallyGotIn_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We see the password provided in the request and we get our flag!"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NO_PASS_NEEDED"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "How Did I Get Here",
                    "Chall-cat": "Log Analysis",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "A new user has been created. Can you find the username?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - user.evtx"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": ".evtx are basically log files generated by various services. I did not have much knowledge about it, but what's wrong with viewing it once?"
                        },
                        {
                            "Type": "text",
                            "text": "I opened it up using the Event Viewer on windows, and it gave me around 185 events."
                        },
                        {
                            "Type": "image",
                            "alt": "evtx file opened on Event Viewer",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/HowDidIGetHere_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Had to make a guess and I believe an action like creating a new account would lie under the task category of 'User Account Management'."
                        },
                        {
                            "Type": "text",
                            "text": "Sorted by the 'Task Category' and iterated through all the events to finally find this:"
                        },
                        {
                            "Type": "image",
                            "alt": "the event which showed new user creation",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/HowDidIGetHere_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Hence the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: SUPER_STEVE_ADMIN"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Web Login",
                    "Chall-cat": "Log Analysis",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you find the login attempt? Password is the flag."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - web1.pcap"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "This one's quite easy if you know what you're looking for."
                        },
                        {
                            "Type": "text",
                            "text": "That's a wireshark capture file so we first open it up on wireshark."
                        },
                        {
                            "Type": "image",
                            "alt": "pcap file on wireshark",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/WebLogin_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We put up the 'http' display filter and sort the 'Info' section to look for POST requests (login is usually done through POST requests)"
                        },
                        {
                            "Type": "image",
                            "alt": "screenshot showing the http requests",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/WebLogin_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Only one request, yay!"
                        },
                        {
                            "Type": "text",
                            "text": "Open it up and we'll see the password"
                        },
                        {
                            "Type": "image",
                            "alt": "password in the POST request packet",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/WebLogin_2.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NOT_MY_PASSWORD"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Who Nmaped me",
                    "Chall-cat": "Log Analysis",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you find the host name of the nmap target?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - nmap.pcap"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "That's a wireshark capture file so we first open it up on wireshark."
                        },
                        {
                            "Type": "image",
                            "alt": "pcap file on wireshark",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/WhoNmapedMe_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We first need to identify the IP of the target machine. Analyze the packets and you'll notice a lot of RST ACK packets sent from 192.168.0.50"
                        },
                        {
                            "Type": "image",
                            "alt": "RST ACK packets in the capture",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/WhoNmapedMe_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "These types of packets are usually sent to close the connection when there is no connection to be found on the port."
                        },
                        {
                            "Type": "text",
                            "text": "Hence we can assume 192.168.0.50 to be the target"
                        },
                        {
                            "Type": "text",
                            "text": "We set it in the display filter, look around more in the packets and find this 'Host Announcement', we see the packet has this Host name and hence the flag."
                        },
                        {
                            "Type": "image",
                            "alt": "packets showing host name in it",
                            "src": "/images/Writeups/CaptureTheWU-2023/LogAnalysis/WhoNmapedMe_2.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: WE-GOT-SCANNED"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Misc": [
                {
                    "Chall-head": "NOT WHAT YOU THINK",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "I invented the MAC so please address me with honor. Who am I?"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "'MAC' and 'address' these two words caught my eye. Google shows MAC Addresses were invented by Xerox scientists, hence the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: CTFWU{Xerox}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Shady Characters",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "My alter ego is 33. I love attacking the aerospace sector and my name closely resembles Santa's helpers. Who am I and what country am I from?"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "'Attacking the aerospace sector' this hinted us towards a hacker or a group or a tool that hacks the aerospace sector. Santa's helpers are known as Elf's so it might be something with similarity to that name. Use chat gpt and it'll list a lot of hacker groups in the aerospace sector. One of them was named APT33 also called as 'Elfin'"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: CTFWU{Elfin}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Password Cracking": [
                {
                    "Chall-head": "Gotta Catch em All",
                    "Chall-cat": "Password Cracking",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Our team has found a set of encrypted messages. They seemed to have figured out that the passwords consists of a pokemon followed by some numbers. Can you decrypt them?"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Hashes:"
                        },
                        {
                            "Type": "text",
                            "text": "fbf5496a008165f6db865a23b3da8d89"
                        },
                        {
                            "Type": "text",
                            "text": "8d4244cb30f5aff30b2327eb439dea05"
                        },
                        {
                            "Type": "text",
                            "text": "3c19b01733e53bd0bf860c59aa2c1c6f"
                        },
                        {
                            "Type": "text",
                            "text": "ba351835bcc91d880881d05725ae399d"
                        },
                        {
                            "Type": "text",
                            "text": "ff097d17d99af6a74612e9d2784be70d"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Upon checking with an online identifier, we come to know that the provided hash is md5. I went to crackstation.net and feeded the data...no luck."
                        },
                        {
                            "Type": "text",
                            "text": "If you google up you'll see there's a pokemon names list consisting of around 700+ pokemon names in it."
                        },
                        {
                            "Type": "text",
                            "text": "Downloaded it, and created a python script to append 1-10000000 numbers after it and hash it to check if that hash is one of the 5 hashes we are given."
                        },
                        {
                            "Type": "text",
                            "text": "Below is my python script. I'm sure there could be more optimized ways to implement or better scripts but this worked well for me."
                        },
                        {
                            "Type": "code",
                            "lang": "Python",
                            "text": "import hashlib\nhashfound = 0\n\ndef hashcheck(instring):\n    for itr in range(100000):\n        string = instring + str(itr)\n        khash = hashlib.md5(string.encode('utf-8')).hexdigest()\n        if khash in hashes:\n            print(string+' '+khash)\n            global hashfound\n            hashfound +=1\n            break\n\npoklist = open('pokemon-list.txt','r').read()\npoklist = poklist.split('\\n')\nprint(len(poklist))\n\nhashes = ['fbf5496a008165f6db865a23b3da8d89',\n'8d4244cb30f5aff30b2327eb439dea05',\n'3c19b01733e53bd0bf860c59aa2c1c6f',\n'ba351835bcc91d880881d05725ae399d',\n'ff097d17d99af6a74612e9d2784be70d']\n\nfor k in poklist:\n    hashcheck(k)\n    if(hashfound==5):\n        break"
                        },
                        {
                            "Type": "text",
                            "text": "I'm aware of the different brute forcing tools like john, hashcat, etc but i just love to script :)"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "golduck467"
                        },
                        {
                            "Type": "heading",
                            "text": "pikachu866"
                        },
                        {
                            "Type": "heading",
                            "text": "gengar420"
                        },
                        {
                            "Type": "heading",
                            "text": "dratini13"
                        },
                        {
                            "Type": "heading",
                            "text": "charizard13478"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Rock You",
                    "Chall-cat": "Password Cracking",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "You are conducting a security audit on a system and have obtained a list of password hashes from the database. You suspect that the passwords are weak and correspond to some passwords from the rockyou data breach. Can you decrypt the hashes?"
                        },
                        {
                            "Type": "text",
                            "text": "82af6f54b3cb7ff9aea67e3205f67b2d"
                        },
                        {
                            "Type": "text",
                            "text": "2c7541b65ef9974179b31472156af2e9"
                        },
                        {
                            "Type": "text",
                            "text": "77764b9856a7d45dfbffa4bab92c6979"
                        },
                        {
                            "Type": "text",
                            "text": "8f5be196c116d266ca269705047af8fe"
                        },
                        {
                            "Type": "text",
                            "text": "f8926a478274a9db2f63fb9bd2c11c5e"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "inline-text",
                            "text": "Just feeding it on a online hash cracker like"
                        },
                        {
                            "Type": "link",
                            "text": "crackstation.net",
                            "url": "https://crackstation.net/"
                        },
                        {
                            "Type": "inline-text",
                            "text": "gets us the required results"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "saleen94"
                        },
                        {
                            "Type": "heading",
                            "text": "bANK$123"
                        },
                        {
                            "Type": "heading",
                            "text": "kellilayne"
                        },
                        {
                            "Type": "heading",
                            "text": "coolabiez"
                        },
                        {
                            "Type": "heading",
                            "text": "MarkBoyd"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "This one is for Ronnie",
                    "Chall-cat": "Password Cracking",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Please give me the md5 hashes for these phrases:"
                        },
                        {
                            "Type": "text",
                            "text": "shockblock123 rotaryfruit valorant flipflop8921 wushockhop"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Just feeding them in an online hash generator, gets us the results."
                        },
                        {
                            "Type": "heading",
                            "text": "Flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "d1360623c8a0ca504831465dfbeebf55"
                        },
                        {
                            "Type": "heading",
                            "text": "23a7ecf40cf7e0d27744a01037f928a3"
                        },
                        {
                            "Type": "heading",
                            "text": "f466d6a4362b0bd8e1112f9db77f62aa"
                        },
                        {
                            "Type": "heading",
                            "text": "380bb609979de7c2d6e8f64eeaee5eb1"
                        },
                        {
                            "Type": "heading",
                            "text": "dd73770d5722188d92e1a2d39e2449ed"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Reverse": [
                {
                    "Chall-head": "Can You Guess My Favorite Number",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - decompileMe.dll, decompileMe.runtimeconfig.json"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "While the right way would be to actually decompile it, BUT, im gonna do what i do first, notepad!!"
                        },
                        {
                            "Type": "text",
                            "text": "We just search for the flag format 'CTFWU' and we got it lol"
                        },
                        {
                            "Type": "image",
                            "alt": "Opening file on notepad and searching for the text 'CTFWU'",
                            "src": "/images/Writeups/CaptureTheWU-2023/Reverse/CanYouGuessMyFavoriteNumber_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "This is definitely not how RevEng questions should be solved, but hey, it sometimes work lol"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: CTFWU{wh4t_4_c001_numb3r}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Coffee Beans",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you decompile me?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - decompileMe.class"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The .class points me towards the fact that it is a java code, you can check that if you open it in a notepad as well."
                        },
                        {
                            "Type": "image",
                            "alt": "File opened in notepad",
                            "src": "/images/Writeups/CaptureTheWU-2023/Reverse/CoffeeBeans_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We use an online java decompiler such as javadecompilers.com and we get the java code."
                        },
                        {
                            "Type": "text",
                            "text": "Analyzing the code is easy if you understand basic programming syntaxes. We build up the flag char by char, and it comes out to be:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: CTFWU{5h1ny_k3y}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Sneaky Snake",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Find the flag in this encrypted python script."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - decryptMe.py"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Well, it's a python code..."
                        },
                        {
                            "Type": "image",
                            "alt": "File opened in python IDLE",
                            "src": "/images/Writeups/CaptureTheWU-2023/Reverse/SneakySnake_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "...which when run gives us this..."
                        },
                        {
                            "Type": "image",
                            "alt": "python program running",
                            "src": "/images/Writeups/CaptureTheWU-2023/Reverse/SneakySnake_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "What if we change the 'exec' command with the 'print' command and see what exactly is the part of the script that's been executed?"
                        },
                        {
                            "Type": "text",
                            "text": "Doing that gets us this:"
                        },
                        {
                            "Type": "image",
                            "alt": "python program running after that change",
                            "src": "/images/Writeups/CaptureTheWU-2023/Reverse/SneakySnake_2.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Well, we found the password: 'youfoundit' and along with it, the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: CTFWU{y0u_f0und_1t}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Web": [
                {
                    "Chall-head": "Image",
                    "Chall-cat": "Web",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you find the hidden flag?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - image.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Well, I'm sure the way I did it was not good, there was definitely some other way it was supposed to be done, but very well..."
                        },
                        {
                            "Type": "text",
                            "text": "We unzip the zip file and get the main folder, we see the folder html_files and enter it cause...I mean...I wanted to? There's a folder named 'Images' there and we enter it cause i guess the name of the challenge has to had some hint?"
                        },
                        {
                            "Type": "text",
                            "text": "That's it, there's an image there by the name: flag.png"
                        },
                        {
                            "Type": "image",
                            "alt": "image file by the name flag.png",
                            "src": "/images/Writeups/CaptureTheWU-2023/Web/Image_0.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag:D1r3ct0ry-h1dd3n"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Plain Sight",
                    "Chall-cat": "Web",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you find the flag?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Plain_Sight.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The correct way I guess would've been to extract the zip and then run the HTML file...but well, why not shortcuts? Just unzip the file and open the files on notepad, it won't be long until you find the flag hidden in the index.html file:"
                        },
                        {
                            "Type": "image",
                            "alt": "HTML file in notepad",
                            "src": "/images/Writeups/CaptureTheWU-2023/Web/PlainSight_0.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag: H0w-d1d-u-f1nd-m3"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "You Can't See Me",
                    "Chall-cat": "Web",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Can you find the hidden flag?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - You_Cant_See_Me.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Again, the correct way I guess would've been to extract the zip and then run the HTML files...but well, why not shortcuts? Just unzip the file and open the files on notepad, it won't be long until you find the flag hidden in the index.html file:"
                        },
                        {
                            "Type": "image",
                            "alt": "HTML file in notepad",
                            "src": "/images/Writeups/CaptureTheWU-2023/Web/YouCantSeeMe_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Not really abusing any Javascript or CSS really, just shortcutss :))"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag: 1ns3cur3-J4va-15-B4d"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ]

        }
    },
    {
    	"Event-name": "TCP1P-2023",
        "Event-logo": "/static/images/Writeups/TCP1P-2023/logo.png",
        "Event-timeline": {
            "Start": "13/10/2023",
            "End": "15/10/2023"
        },
        "Event-sections": {
            "Forensics": [
                {
                    "Chall-head": "brokenimg",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "why the picture like this"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - chall.pdf"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "First of all, the challenge talks about an image, but a PDF file is given?? Hmmm, let's analyze this file. The PDF file in itself is filled with text related to a very deep love story and the hardships a picture had to face lol (did not made me cry there) I tried strings on the PDF file when a lot of stuff came up, which hinted me towards using the exiftool (the data can also be retrieved from strings but for this writeup purpose i'll show it using exiftool)"
                        },
                        {
                            "Type": "image",
                            "alt": "exiftool on the image",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/brokenimg_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We get this array of numbers that does not make sense like this:"
                        },
                        {
                            "Type": "text",
                            "text": "[150 164 164 160 163 72 57 57 146 151 154 145 163 56 144 157 170 142 151 156 56 147 147 57 157 63 126 144 162 115 160 164 56 160 156 147]"
                        },
                        {
                            "Type": "text",
                            "text": "We enter this on cyberchef and realize it's in the octal system and translates to a files.doxbin URL. The files.doxbin had a PNG file which we downloaded. (Finally an image!!)"
                        },
                        {
                            "Type": "link",
                            "text": "Link to that image file",
                            "url": "https://files.doxbin.gg/o3VdrMpt.png"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "image",
                            "alt": "image file present inside the bin",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/brokenimg_1.PNG"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "inline-text",
                            "text": "This image on one look, looks like it's been skewed to its death, so we're gonna unskew it. I'm gonna use a online photo editing tool named"
                        },
                        {
                            "Type": "link",
                            "text": "photopea",
                            "url": "https://www.photopea.com/"
                        },
                        {
                            "Type": "inline-text",
                            "text": "and here is what i got after unskewing it:"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "image",
                            "alt": "unskewed that image",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/brokenimg_2.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We notice there are 2 chunks of encrypted text present in the image which is trimmed a bit towards the corners, but the same trimmed text is then displayed on the other corner of the image. After a bit of struggle and a lot of coffee we were able to get both of those texts and combined it into a single one which read:"
                        },
                        {
                            "Type": "code",
                            "text": "KZCU4UKNKZBDOY2HKJWVQMTHGBSGUTTGJZDDSUKNK5HDAZCYJF5FQMSKONSFQSTGJZDTK22YPJLG6TKXLIYGMULPHU======"
                        },
                        {
                            "Type": "text",
                            "text": "Upon checking it in Cyberchef, we got to know the text was encrypted using Base64 first and then Base32, so we decode it and get this:"
                        },
                        {
                            "Type": "image",
                            "alt": "decoding of text in cyberchef",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/brokenimg_3.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Hence our flag!"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: TCP1P{pdf_h4v3_4_P1ctur3_blur_4nd_5h1ft}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "(G4170nd3)"
                        }
                    ]
                },
                {
                    "Chall-head": "Ez PDF",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "I just downloaded this PDF file from a strange site on the internet..."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - TCP1P-CTF.pdf"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "First basic thing, using strings on the PDF file"
                        },
                        {
                            "Type": "image",
                            "alt": "strings on the pdf file",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/EzPDF_0.PNG"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "inline-text",
                            "text": "We see this javascript code, which on one look looks obfuscated. We use a online JS deobfuscator such as "
                        },
                        {
                            "Type": "link",
                            "text": "Online deobfuscator",
                            "url": "https://deobfuscate.relative.im/"
                        },
                        {
                            "Type": "inline-text",
                            "text": " and get this:"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "image",
                            "alt": "deobfuscated jscript code",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/EzPDF_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Well, not really difficult now right?"
                        },
                        {
                            "Type": "text",
                            "text": "The execution of this code will reveal:"
                        },
                        {
                            "Type": "text",
                            "text": "_15N7_17_l3jaf9ci293m1d}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "It looks like a small part of the flag, so maybe the flag is broken into pieces? hmm..."
                        },
                        {
                            "Type": "text",
                            "text": "Next, we perform exiftool on the PDF file:"
                        },
                        {
                            "Type": "image",
                            "alt": "exiftool on the pdf file",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/EzPDF_2.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "The creator got a very unique name, no?"
                        },
                        {
                            "Type": "text",
                            "text": "It's base64 encoded and it decodes to:"
                        },
                        {
                            "Type": "text",
                            "text": "\"In this question, the flag has been divided into 3 parts. You have found the first part of the flag!! TCP1P{D01n9_F023n51C5\""
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "which confirms that the text we got earlier, might be a part of the flag, actually, looks more like the last part of the flag because of the curly bracket at the end."
                        },
                        {
                            "Type": "text",
                            "text": "Updated flag:"
                        },
                        {
                            "Type": "text",
                            "text": "TCP1P{D01n9_F023n51C5???_15N7_17_l3jaf9ci293m1d}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Now this is where I was stuck for the longest time, no other analysis revealed any part of the flag, and according to the question we had only 1 more missing part. I researched online and got to know we can hide images as well in the PDF, but wasn't able to find any good tool online, so i wrote a python script :))"
                        },
                        {
                            "Type": "code",
                            "lang": "Python",
                            "text": "pdf_file = \"TCP1P-CTF.pdf\"\npdf_document = fitz.open(pdf_file)\n\nfor page_num in range(len(pdf_document)):\n    page = pdf_document.load_page(page_num)\n\n    xObject = page.get_images()\n\n    for img_index, img in enumerate(xObject):\n        xref = img[0]\n        base_image = pdf_document.extract_image(xref)\n\n        image_data = base_image[\"image\"]\n\n        image_filename = f\"image_{img_index + 1}.png\"\n\n        with open(image_filename, \"wb\") as image_file:\n            image_file.write(image_data)\n\npdf_document.close()"
                        },
                        {
                            "Type": "text",
                            "text": "Well, it finally worked out (after a shit lot of error debugging) and gave us two images, one more than what was actually visible on the file, it gave us this part of the flag:"
                        },
                        {
                            "Type": "image",
                            "alt": "2nd part of the flag",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/EzPDF_3.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Hence our flag!"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: TCP1P{pdf_h4v3_4_P1ctur3_blur_4nd_5h1ft}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "hide and split",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Explore this disk image file, maybe you can find something hidden in it."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - challenge.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The zip file contained only one file, a challenge.ntfs file, for those who don't know what NTFS is, I'd recommend you to go read about it first, it's very cool! "
                        },
                        {
                            "Type": "text",
                            "text": "Continuing with the challenge, the question says something about \"hidden\", maybe it has hidden files in it?"
                        },
                        {
                            "Type": "text",
                            "text": "We open the file in autopsy and see that it has several text files named flag00.txt to flag99.txt, and it all had the same data:"
                        },
                        {
                            "Type": "image",
                            "alt": "file opened in autopsy",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/hideandsplit_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "\"Unfortunately this is not the flag"
                        },
                        {
                            "Type": "text",
                            "text": "The flag has been split and stored in the hidden part of the disk\""
                        },
                        {
                            "Type": "text",
                            "text": "We see there are more files, one for each of the text file named as flag00.txt:flag0 to flag99.txt:flag99"
                        },
                        {
                            "Type": "text",
                            "text": "...and it had this weird looking data, something like a hex?"
                        },
                        {
                            "Type": "image",
                            "alt": "hex data in the files",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/hideandsplit_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Luckily, i convert the \"supposedly\" hex in the flag00.txt:flag0 file and got this:"
                        },
                        {
                            "Type": "text",
                            "text": "I saw this \"PNG\" and \"IHDR\" which hinted maybe?? maybe this is a PNG file??"
                        },
                        {
                            "Type": "text",
                            "text": "...and this is what i meant by being lucky, if i would've decoded the hex from some other file, it'd have given me some gibberish data and i would've discarded this approach."
                        },
                        {
                            "Type": "text",
                            "text": "I copy pasted all the data in cyberchef and it translated into a PNG of a QR code, which further decrypted into the flag:"
                        },
                        {
                            "Type": "image",
                            "alt": "all hex content decoded multiple times in cyberchef",
                            "src": "/images/Writeups/TCP1P-2023/Forensics/hideandsplit_2.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: TCP1P{hidden_flag_in_the_extended_attributes_fea73c5920aa8f1c}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Misc": [
                {
                    "Chall-head": "Guess My Number",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "My friend said if i can guess the right number, he will give me something. Can you help me?"
                        },
                        {
                            "Type": "text",
                            "text": "nc ctf.tcp1p.com 7331"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - dist.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The zip file contained a single file named 'guess' which looks like a ELF executable file:"
                        },
                        {
                            "Type": "image",
                            "alt": "file command executed on the extracted file",
                            "src": "/images/Writeups/TCP1P-2023/Misc/GuessMyNumber_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We open it up in ghidra and navigate to the function that looks interesting:"
                        },
                        {
                            "Type": "image",
                            "alt": "function named vuln opened up in ghidra",
                            "src": "/images/Writeups/TCP1P-2023/Misc/GuessMyNumber_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "If we read through it, we'll see it asks the user for a 'guess' and then performs some operation on the number entered, then it compares the result with a hex number, if it matches, then it prints the flag."
                        },
                        {
                            "Type": "text",
                            "text": "Let's debug it step by step"
                        },
                        {
                            "Type": "text",
                            "text": "First of all, 0xcafebabe is the hex number that it compares to at the end, which translates to 3405691582 in the decimal system, so that’s the number we need to reach at the end."
                        },
                        {
                            "Type": "text",
                            "text": "There's a variable iVar1 that we'll require the value of so let's check that out first."
                        },
                        {
                            "Type": "text",
                            "text": "The iVar1 variable is generated by the random function using the rand() function, so its actually a random number??"
                        },
                        {
                            "Type": "text",
                            "text": "Not really, if we check the previous line, we see:"
                        },
                        {
                            "Type": "code",
                            "text": "srand(0x539);"
                        },
                        {
                            "Type": "text",
                            "text": "What this function does is set a seed for the random method, in short, setting a seed sets the starting point of the random number generator. This means that the first number generated by the random generator could be calculated."
                        },
                        {
                            "Type": "text",
                            "text": "For this we open a online C compiler, use the srand(0x539) and generate a random (not so random) number, and we get the number:"
                        },
                        {
                            "Type": "code",
                            "text": "292616681"
                        },
                        {
                            "Type": "text",
                            "text": "Now just basic maths:"
                        },
                        {
                            "Type": "code",
                            "text": "Input ^ (292616681 + 0x1467f3) = 0xcafebabe\nInput ^ (292616681 + 1337331)  = 3405691582\nInput ^ (292616681 + 1337331) ^ (292616681 + 1337331) = 3405691582 ^ (292616681 + 1337331)\nInput = 3405691582 ^ (292616681 + 1337331)\nInput = 3405691582 ^ (293954012)\nInput = 3682327394"
                        },
                        {
                            "Type": "text",
                            "text": "We connect using the netcat client and enter the number, and boom!"
                        },
                        {
                            "Type": "image",
                            "alt": "using the netcat command on the connection details given",
                            "src": "/images/Writeups/TCP1P-2023/Misc/GuessMyNumber_2.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "TCP1P{r4nd0m_1s_n0t_th4t_r4nd0m_r19ht?_946f38f6ee18476e7a0bff1c1ed4b23b}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "zipzipzipzip",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "unzip me pls"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - password.txt, zip-25000.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "We open the zip using the given password, and there’s another zip file??? named zip-24999.zip and a password file containing a different password. Well the objective is clear, we need to use the password in the password.txt file to open the zip file, but there are 25000 zips, so we can't do this manually hence i wrote a script."
                        },
                        {
                            "Type": "text",
                            "text": "First big mistake! Don't use python, that shit takes time to unzip files because of I don't know what reason. Maybe the zip module is slow in general or python is slow to perform such tasks, but it took me like 2-3 hours to unzip only 300ish zips? I rewrote the whole script in bash, and boom! 25ish minutes to decrypt the whole 25000 zips"
                        },
                        {
                            "Type": "code",
                            "lang": "bash",
                            "text": "for ((i = 25000 ; i >= 1 ; i--))\ndo\n  pswd=`cat password.txt`\n  rm password.txt\n  unzip -P $pswd zip-${i}.zip\n  rm zip-${i}.zip\ndone"
                        },
                        {
                            "Type": "text",
                            "text": "PS: i forgot the rm zip line at first and in seconds my directory was filled with hundreds of zip files T_T (don't make such dumb mistakes)"
                        },
                        {
                            "Type": "text",
                            "text": "It took like 30-ish minutes and we had the file, flag.txt:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: TCP1P{1_TH1NK_U_G00D_4T_SCR1PT1N9_botanbell_1s_h3r3^_^}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "PWN": [
                {
                    "Chall-head": "Bluffer Overflow",
                    "Chall-cat": "PWN",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Maybe it's your first time pwning? Can you overwrite the variable?"
                        },
                        {
                            "Type": "text",
                            "text": "nc ctf.tcp1p.com 17027"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - dist.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The zip file gave me a C file named chall.c, so we're gonna go analyze it first"
                        },
                        {
                            "Type": "text",
                            "text": "The main lines to focus at are these:"
                        },
                        {
                            "Type": "code",
                            "text": "char buff[20];\nint buff2;\n.\n.\n.\nvoid buffer(){\n  buff2 = 0;\n    printf(\"Can you get the exact value to print the flag?\\n\");\n    printf(\"Input: \");\n  fflush(stdout);\n   gets(buff); \n  if (buff2 > 5134160) {\n        printf(\"Too high!\\n\\n\");\n  } else if (buff2 == 5134160){\n     printf(\"Congrats, You got the right value!\\n\");\n        system(\"cat flag.txt\");\n } else {\n      printf(\"Sad, too low! :(, maybe you can add *more* value 0_0\\n\\n\");\n   }\n printf(\"\\nOutput : %s, Value : %d \\n\", buff, buff2);\n}"
                        },
                        {
                            "Type": "text",
                            "text": "Let me explain in short what's happening"
                        },
                        {
                            "Type": "text",
                            "text": "At first the C program is defining a char array named buff of size 20 bytes and an integer variable named buff2"
                        },
                        {
                            "Type": "text",
                            "text": "In the buffer function, it declares the value of buff2 = 0 and asks the user for an input."
                        },
                        {
                            "Type": "text",
                            "text": "We notice it takes the input using the get() function in the buff which is definitely not safe."
                        },
                        {
                            "Type": "text",
                            "text": "After the user input, it compares the value of buff2 with 5134160 and gives a correct response along with the flag if its value matches."
                        },
                        {
                            "Type": "text",
                            "text": "So our objective:"
                        },
                        {
                            "Type": "text",
                            "text": "Change the value of buff2 to 5134160 by using a buffer overflow."
                        },
                        {
                            "Type": "text",
                            "text": "First, to achieve buffer overflow, as the name suggests we need to fill the buffer. The input is taken into the buff variable which is of 20 bytes so we'll prepend 20 bytes of random text to our payload (eg: \"AAAAAAAAAAAAAAAAAAAA\"). Then after this text we're going to append the characters to the payload such that its value ends up being equal to 5134160."
                        },
                        {
                            "Type": "text",
                            "text": "First we'll convert the required decimal value into hex"
                        },
                        {
                            "Type": "code",
                            "text": "5134160 = 0x4E5750 = 0x4E 0x57 0x50"
                        },
                        {
                            "Type": "text",
                            "text": "In little endian it would 0x50 0x57 0x4E"
                        },
                        {
                            "Type": "text",
                            "text": "We then convert it into ASCII text and get the string:"
                        },
                        {
                            "Type": "code",
                            "text": "0x50 - P ; 0x57 - W ; 0x4E - N"
                        },
                        {
                            "Type": "text",
                            "text": "Hence:"
                        },
                        {
                            "Type": "code",
                            "text": "/0x50/0x57/0x4E = PWN"
                        },
                        {
                            "Type": "text",
                            "text": "We're going to append this to our payload:"
                        },
                        {
                            "Type": "code",
                            "text": "\"A\"*20 + PWN"
                        },
                        {
                            "Type": "text",
                            "text": "Thus, final payload: AAAAAAAAAAAAAAAAAAAAPWN"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "We enter this payload into the program and boom:"
                        },
                        {
                            "Type": "image",
                            "alt": "entering the input and getting the flag",
                            "src": "/images/Writeups/TCP1P-2023/PWN/BlufferOverflow_0.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "TCP1P{ez_buff3r_0verflow_l0c4l_v4r1abl3_38763f0c86da16fe14e062cd054d71ca}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Reverse": [
                {
                    "Chall-head": "Subject Encallment",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "If there's something strange. In your neighborhood. Who you gonna call?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - chall"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The 'call' word in the challenge itself gives a very big hint. It might refer to making a function call. Let's check it out."
                        },
                        {
                            "Type": "text",
                            "text": "Firstly, using file command on the file tells us its an ELF executable file"
                        },
                        {
                            "Type": "image",
                            "alt": "file  command used on the given file",
                            "src": "/images/Writeups/TCP1P-2023/Reverse/SubjectEncallment_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We fire up ghidra and we see the following functions:"
                        },
                        {
                            "Type": "image",
                            "alt": "list of functions in ghidra",
                            "src": "/images/Writeups/TCP1P-2023/Reverse/SubjectEncallment_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We go through the phase 1-14 and doesn't quite see anything important, not as important of a function that 'printFlag' looks like. We open up the function and well, it does make calls to all the phase functions, so we wont need it on a individual basis."
                        },
                        {
                            "Type": "image",
                            "alt": "printFlag function opened up",
                            "src": "/images/Writeups/TCP1P-2023/Reverse/SubjectEncallment_2.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We see the main function and what it does is make a call to the 'secretFunction', upon checking the 'secretFunction' also there is no call made to the 'printFlag' function, which made me more curious about this function."
                        },
                        {
                            "Type": "image",
                            "alt": "main function decompiled in ghidra",
                            "src": "/images/Writeups/TCP1P-2023/Reverse/SubjectEncallment_3.PNG"
                        },
                        {
                            "Type": "image",
                            "alt": "running the main program",
                            "src": "/images/Writeups/TCP1P-2023/Reverse/SubjectEncallment_4.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Well, umm, okay."
                        },
                        {
                            "Type": "text",
                            "text": "What if we jump our program to the 'printFlag' function directly?"
                        },
                        {
                            "Type": "text",
                            "text": "We open up our program on gdb (gdb chall) apply a breakpoint at main (b main) and then run the program (run)"
                        },
                        {
                            "Type": "image",
                            "alt": "jumping to the printFlag function",
                            "src": "/images/Writeups/TCP1P-2023/Reverse/SubjectEncallment_5.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "When our program stops at the breakpoint, we use the command \"jump <functionName>\" to jump to that particular function. In this case it'd be \"jump printFlag\""
                        },
                        {
                            "Type": "image",
                            "alt": "flag output when jumped",
                            "src": "/images/Writeups/TCP1P-2023/Reverse/SubjectEncallment_6.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: TCP1P{here_my_number_so_call_me_maybe}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Take Some Byte",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "I think some code is need some effort to read."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - byte.txt"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "I'm just gonna paste the whole content of the byte.txt file here first and divide it into several sections for easy reference."
                        },
                        {
                            "Type": "text",
                            "text": "Section - 1:"
                        },
                        {
                            "Type": "code",
                            "text": "15            0 LOAD_FAST                0 (flag)\n              2 LOAD_CONST               0 (None)\n              4 LOAD_CONST               1 (6)\n              6 BUILD_SLICE              2\n              8 BINARY_SUBSCR\n             10 LOAD_CONST               2 ('TCP1P{')\n             12 COMPARE_OP               3 (!=)\n             14 POP_JUMP_IF_FALSE       38\n             16 LOAD_FAST                0 (flag)\n             18 LOAD_CONST               3 (-1)\n             20 LOAD_CONST               0 (None)\n             22 BUILD_SLICE              2\n             24 BINARY_SUBSCR\n             26 LOAD_CONST               4 ('}')\n             28 COMPARE_OP               3 (!=)\n             30 POP_JUMP_IF_FALSE       38"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 2:"
                        },
                        {
                            "Type": "code",
                            "text": " 16          32 LOAD_GLOBAL              0 (oops)\n             34 CALL_FUNCTION            0\n             36 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 3:"
                        },
                        {
                            "Type": "code",
                            "text": " 18     >>   38 LOAD_FAST                0 (flag)\n             40 LOAD_CONST               1 (6)\n             42 LOAD_CONST               5 (10)\n             44 BUILD_SLICE              2\n             46 BINARY_SUBSCR\n             48 LOAD_CONST               6 ('byte')\n             50 COMPARE_OP               2 (==)\n             52 POP_JUMP_IF_FALSE       60"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 4:"
                        },
                        {
                            "Type": "code",
                            "text": " 19          54 LOAD_GLOBAL              1 (yeayy)\n             56 CALL_FUNCTION            0\n             58 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 5:"
                        },
                        {
                            "Type": "code",
                            "text": " 21     >>   60 LOAD_FAST                0 (flag)\n             62 LOAD_CONST               5 (10)\n             64 BINARY_SUBSCR\n             66 POP_JUMP_IF_FALSE       98\n             68 LOAD_FAST                0 (flag)\n             70 LOAD_CONST               7 (15)\n             72 BINARY_SUBSCR\n             74 POP_JUMP_IF_FALSE       98\n             76 LOAD_FAST                0 (flag)\n             78 LOAD_CONST               8 (18)\n             80 BINARY_SUBSCR\n             82 LOAD_GLOBAL              2 (chr)\n             84 LOAD_CONST               9 (95)\n             86 CALL_FUNCTION            1\n             88 COMPARE_OP               3 (!=)\n             90 POP_JUMP_IF_FALSE       98"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 6:"
                        },
                        {
                            "Type": "code",
                            "text": " 22          92 LOAD_GLOBAL              0 (oops)\n             94 CALL_FUNCTION            0\n             96 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 7:"
                        },
                        {
                            "Type": "code",
                            "text": " 24     >>   98 LOAD_FAST                0 (flag)\n            100 LOAD_CONST              10 (11)\n            102 LOAD_CONST               7 (15)\n            104 BUILD_SLICE              2\n            106 BINARY_SUBSCR\n            108 LOAD_CONST              11 ('code')\n            110 COMPARE_OP               3 (!=)\n            112 POP_JUMP_IF_FALSE      120"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 8:"
                        },
                        {
                            "Type": "code",
                            "text": " 25         114 LOAD_GLOBAL              0 (oops)\n            116 CALL_FUNCTION            0\n            118 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 9:"
                        },
                        {
                            "Type": "code",
                            "text": " 27     >>  120 LOAD_FAST                0 (flag)\n            122 LOAD_CONST              10 (11)\n            124 BINARY_SUBSCR\n            126 LOAD_FAST                0 (flag)\n            128 LOAD_CONST              12 (1)\n            130 BINARY_SUBSCR\n            132 LOAD_METHOD              3 (lower)\n            134 CALL_METHOD              0\n            136 COMPARE_OP               2 (==)\n            138 POP_JUMP_IF_FALSE      146"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 10:"
                        },
                        {
                            "Type": "code",
                            "text": " 28         140 LOAD_GLOBAL              1 (yeayy)\n            142 CALL_FUNCTION            0\n            144 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 11:"
                        },
                        {
                            "Type": "code",
                            "text": " 30     >>  146 LOAD_FAST                0 (flag)\n            148 LOAD_CONST              13 (12)\n            150 BINARY_SUBSCR\n            152 LOAD_GLOBAL              4 (ord)\n            154 LOAD_FAST                0 (flag)\n            156 LOAD_CONST              14 (20)\n            158 BINARY_SUBSCR\n            160 CALL_FUNCTION            1\n            162 LOAD_CONST               1 (6)\n            164 BINARY_SUBTRACT\n            166 COMPARE_OP               2 (==)\n            168 POP_JUMP_IF_FALSE      176"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 12:"
                        },
                        {
                            "Type": "code",
                            "text": " 31         170 LOAD_GLOBAL              1 (yeayy)\n            172 CALL_FUNCTION            0\n            174 POP_TOP"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 13:"
                        },
                        {
                            "Type": "code",
                            "text": " 33     >>  176 LOAD_GLOBAL              4 (ord)\n            178 LOAD_FAST                0 (flag)\n            180 LOAD_CONST              15 (16)\n            182 BINARY_SUBSCR\n            184 CALL_FUNCTION            1\n            186 LOAD_CONST              16 (105)\n            188 COMPARE_OP               3 (!=)\n            190 POP_JUMP_IF_FALSE      214\n            192 LOAD_GLOBAL              4 (ord)\n            194 LOAD_FAST                0 (flag)\n            196 LOAD_CONST              17 (17)\n            198 BINARY_SUBSCR\n            200 CALL_FUNCTION            1\n            202 LOAD_CONST              18 (115)\n            204 COMPARE_OP               3 (!=)\n            206 POP_JUMP_IF_FALSE      214"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 14:"
                        },
                        {
                            "Type": "code",
                            "text": " 34         208 LOAD_GLOBAL              0 (oops)\n            210 CALL_FUNCTION            0\n            212 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 15:"
                        },
                        {
                            "Type": "code",
                            "text": " 36     >>  214 LOAD_FAST                0 (flag)\n            216 LOAD_CONST              19 (19)\n            218 BINARY_SUBSCR\n            220 LOAD_CONST              20 ('H')\n            222 COMPARE_OP               3 (!=)\n            224 POP_JUMP_IF_FALSE      232"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 16:"
                        },
                        {
                            "Type": "code",
                            "text": " 37         226 LOAD_GLOBAL              0 (oops)\n            228 CALL_FUNCTION            0\n            230 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 17:"
                        },
                        {
                            "Type": "code",
                            "text": " 39     >>  232 LOAD_GLOBAL              4 (ord)\n            234 LOAD_FAST                0 (flag)\n            236 LOAD_CONST              14 (20)\n            238 BINARY_SUBSCR\n            240 CALL_FUNCTION            1\n            242 LOAD_CONST              21 (117)\n            244 COMPARE_OP               2 (==)\n            246 POP_JUMP_IF_FALSE      254"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 18:"
                        },
                        {
                            "Type": "code",
                            "text": " 40         248 LOAD_GLOBAL              1 (yeayy)\n            250 CALL_FUNCTION            0\n            252 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 19:"
                        },
                        {
                            "Type": "code",
                            "text": " 42     >>  254 LOAD_GLOBAL              4 (ord)\n            256 LOAD_FAST                0 (flag)\n            258 LOAD_CONST              22 (21)\n            260 BINARY_SUBSCR\n            262 CALL_FUNCTION            1\n            264 LOAD_GLOBAL              4 (ord)\n            266 LOAD_FAST                0 (flag)\n            268 LOAD_CONST              23 (2)\n            270 BINARY_SUBSCR\n            272 CALL_FUNCTION            1\n            274 LOAD_CONST               5 (10)\n            276 BINARY_SUBTRACT\n            278 COMPARE_OP               3 (!=)\n            280 EXTENDED_ARG             1\n            282 POP_JUMP_IF_FALSE      290"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 20:"
                        },
                        {
                            "Type": "code",
                            "text": " 43         284 LOAD_GLOBAL              0 (oops)\n            286 CALL_FUNCTION            0\n            288 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 21:"
                        },
                        {
                            "Type": "code",
                            "text": " 45     >>  290 LOAD_FAST                0 (flag)\n            292 LOAD_CONST              24 (22)\n            294 BINARY_SUBSCR\n            296 LOAD_FAST                0 (flag)\n            298 LOAD_CONST              25 (0)\n            300 BINARY_SUBSCR\n            302 LOAD_METHOD              3 (lower)\n            304 CALL_METHOD              0\n            306 COMPARE_OP               3 (!=)\n            308 EXTENDED_ARG             1\n            310 POP_JUMP_IF_FALSE      318"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 22:"
                        },
                        {
                            "Type": "code",
                            "text": " 46         312 LOAD_GLOBAL              0 (oops)\n            314 CALL_FUNCTION            0\n            316 POP_TOP"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 23:"
                        },
                        {
                            "Type": "code",
                            "text": " 48     >>  318 LOAD_FAST                0 (flag)\n            320 LOAD_CONST              24 (22)\n            322 BINARY_SUBSCR\n            324 LOAD_FAST                0 (flag)\n            326 LOAD_CONST              26 (23)\n            328 BINARY_SUBSCR\n            330 COMPARE_OP               2 (==)\n            332 EXTENDED_ARG             1\n            334 POP_JUMP_IF_FALSE      342"
                        },
                        {
                            "Type": "text",
                            "text": "Section - 24:"
                        },
                        {
                            "Type": "code",
                            "text": " 49         336 LOAD_GLOBAL              1 (yeayy)\n            338 CALL_FUNCTION            0\n            340 POP_TOP\n        >>  342 LOAD_CONST               0 (None)\n            344 RETURN_VALUE"
                        },
                        {
                            "Type": "text",
                            "text": "Now, as we've divided the whole \"thing\" into 24 different sections, we'll start to work on them individually. Upon a quick google search we get to know this is python bytecode which is basically generated by the compiler for easy machine level understanding."
                        },
                        {
                            "Type": "text",
                            "text": "No, we don't need to learn bytecode in order to solve this question (not entirely) but we'll see specific functions that are used in this given bytecode. CPython uses a stack-based virtual machine, so basically push and pop functions so we're gonna work with that."
                        },
                        {
                            "Type": "text",
                            "text": "A quick understanding of this bytecode reveals that the code is basically performing some operations and in response generating some sort of output (take a quick peek and we'll see \"yeayy\" and \"oops\"  so I'm basically guessing it's for the right and the wrong conditions.)"
                        },
                        {
                            "Type": "text",
                            "text": "Checking it further, we see that sections 2,4,6,8,10,12,14,16,18,20,22 and 24 have almost nothing in it except the \"yeayy\" / \"oops\" so basically its just checking for right or wrong. "
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Let's understand Section - 1 briefly:"
                        },
                        {
                            "Type": "code",
                            "text": "Line 1            0 LOAD_FAST                0 (flag)\nLine 2            2 LOAD_CONST               0 (None)\nLine 3            4 LOAD_CONST               1 (6)\nLine 4             6 BUILD_SLICE              2\nLine 5             8 BINARY_SUBSCR\nLine 6             10 LOAD_CONST               2 ('TCP1P{')\nLine 7             12 COMPARE_OP               3 (!=)\nLine 8             14 POP_JUMP_IF_FALSE       38\nLine 9             16 LOAD_FAST                0 (flag)\nLine 10             18 LOAD_CONST               3 (-1)\nLine 11             20 LOAD_CONST               0 (None)\nLine 12             22 BUILD_SLICE              2\nLine 13             24 BINARY_SUBSCR\nLine 14             26 LOAD_CONST               4 ('}')\nLine 15             28 COMPARE_OP               3 (!=)\nLine 16             30 POP_JUMP_IF_FALSE       38"
                        },
                        {
                            "Type": "text",
                            "text": "Line 1 basically tells code to lead the variable 'flag' onto the stack"
                        },
                        {
                            "Type": "text",
                            "text": "Line 2 tells the stack to load the constant None onto the stack"
                        },
                        {
                            "Type": "text",
                            "text": "Line 3 loads the constant '6' onto the stack"
                        },
                        {
                            "Type": "text",
                            "text": "Line 4 BUILD_SLICE is basically used to create a slice, it'll first pop the top 2 elements from the stack which are None and 6 and then create a slice out of it and then push that onto the stack. (if you don't understand what a slice is, check next line and you'll get an idea)"
                        },
                        {
                            "Type": "text",
                            "text": "Line 5 BINARY_SUBSCR basically pops the top 2 elements of the stack which are the recently pushed slice and the flag (which we pushed at the starting) and then uses that slice on the flag, which is basically equivalent to flag[None:6] = flag[6] and then pushes this segment onto the stack."
                        },
                        {
                            "Type": "text",
                            "text": "Line 6 then pushes the string 'TCP1P{' onto the stack and"
                        },
                        {
                            "Type": "text",
                            "text": "Line 7 first pops the top elements of the stack ('TCP1P{' and flag[6]) and compares them."
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "This is all we need to understand, the logic behind this is not that difficult, now try to implement this same logic on Line 9 to Line 14."
                        },
                        {
                            "Type": "text",
                            "text": "What those lines are basically checking is the last index of the flag to be \"}\""
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Now, we'll be using this similar logic on sections 3,5,7,9,11,13,15,17,19,21 and 23 to craft a flag"
                        },
                        {
                            "Type": "text",
                            "text": "Flag till now: TCP1P{}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-3:"
                        },
                        {
                            "Type": "text",
                            "text": "This section tells us the value of flag[6:10] to be 'byte',thus"
                        },
                        {
                            "Type": "text",
                            "text": "updated flag: TCP1P{byte}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-5:"
                        },
                        {
                            "Type": "text",
                            "text": "This section tells that the index value of 10,15 and 18 should be present in the flag and should be equal to char(95) = _"
                        },
                        {
                            "Type": "text",
                            "text": "Therefore,"
                        },
                        {
                            "Type": "text",
                            "text": "updated flag: TCP1P{byte_????_??_}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-7:"
                        },
                        {
                            "Type": "text",
                            "text": "Similar to section 3, this section tells us that value of flag[11:15] = 'code'"
                        },
                        {
                            "Type": "text",
                            "text": "Updated flag: TCP1P{byte_code_??_}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-9:"
                        },
                        {
                            "Type": "text",
                            "text": "This section checks that flag[11] should be equal to lower(flag[1]), which if we check is true, so that's that, no update to the flag"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-11:"
                        },
                        {
                            "Type": "text",
                            "text": "This section checks that ord(flag[12]) = ord(flag[20]) - 6"
                        },
                        {
                            "Type": "text",
                            "text": "Since we already know flag[12], we can calculate flag[20] out to be 'u'"
                        },
                        {
                            "Type": "text",
                            "text": "Updated flag: TCP1P{byte_code_??_?u}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-13:"
                        },
                        {
                            "Type": "text",
                            "text": "This section checks ord(flag[16])=105 and ord(flag[17])=115, which are basically for the letters 'i' and 's' respectively."
                        },
                        {
                            "Type": "text",
                            "text": "Updated flag: TCP1P{byte_code_is_?u}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-15:"
                        },
                        {
                            "Type": "text",
                            "text": "Checks flag[19] = 'H'"
                        },
                        {
                            "Type": "text",
                            "text": "Updated flag: TCP1P{byte_code_is_Hu}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-17:"
                        },
                        {
                            "Type": "text",
                            "text": "ord(flag[20]) = 117"
                        },
                        {
                            "Type": "text",
                            "text": "Which we already know, so no update"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-19:"
                        },
                        {
                            "Type": "text",
                            "text": "ord(flag[21]) = ord(flag[2]), which tells us that flag[21] = 'P'"
                        },
                        {
                            "Type": "text",
                            "text": "Updated flag: TCP1P{byte_code_is_HuP}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-21:"
                        },
                        {
                            "Type": "text",
                            "text": "flag[22] = lower(flag[0]), which tells us that flag[22] = 't'"
                        },
                        {
                            "Type": "text",
                            "text": "Updated flag: TCP1P{byte_code_is_HuPt}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Section-23:"
                        },
                        {
                            "Type": "text",
                            "text": "flag[22] = flag[23] = 't'"
                        },
                        {
                            "Type": "text",
                            "text": "Updated flag: TCP1P{byte_code_is_HuPtt}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "There are no more sections left and yeah i agree the last part of the flag doesn't make much of a sense, but well, that is the flag."
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: TCP1P{byte_code_is_HuPtt}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ]
        }
    },
    {
        "Event-name": "Deadface-2023",
        "Event-logo": "/static/images/Writeups/Deadface-2023/logo.png",
        "Event-timeline": {
            "Start": "20/10/2023",
            "End": "22/10/2023"
        },
        "Event-sections": {
            "Bonus": [
                {
                    "Chall-head": "Off the rails",
                    "Chall-cat": "Bonus",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Players will have to figure out the hidden message left from one of the staff of DEADFACE CTF."
                        },
                        {
                            "Type": "text",
                            "text": "This is one of Shamel's favorite ciphers Enjoy!"
                        },
                        {
                            "Type": "text",
                            "text": "IOBTSHIASKLENJOCMEUAGTGLTNTUYUIIOTEALHVAPOYALWEADNOSMSAYOISORLGSHSADHUSSRBTNRSEOHONEYERVYFIONO"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Quite easy actually, the \"rails\" in the name hints us towards the rail cipher!"
                        },
                        {
                            "Type": "text",
                            "text": "We decode it and get:"
                        },
                        {
                            "Type": "code",
                            "text": "ITSNOTRUBYBUTITISONTHERAILSHAVEASPOOKYHALLOWEENANDENJOYSOMESCARYMOVIESYOURFLAGISGHOSTANDGHOULS"
                        },
                        {
                            "Type": "text",
                            "text": "Hence our flag!"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{GHOSTANDGHOULS}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Crypto": [
                {
                    "Chall-head": "B1tz and B0tz",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Yet another message was left at the scene. Perhaps they think they are giving us a lesson...either way report back to us what this says but dont give us guesses! Make sure you check your work!"
                        },
                        {
                            "Type": "text",
                            "text": "Submit Flag as flag{hiddenmessage}"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - bitsandbots.txt"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The file given contains some binary strings, we open it up on cyberchef and get the following decoded text:"
                        },
                        {
                            "Type": "code",
                            "text": "dont forget the basics! but you diddnt think it would be that easy did you? HAHAHAHAHA Silly Turbos! More Like Turbo TACKY!!!! Go ahead and ROT \n73 79 6E 74 7B 73 79 76 63 76 67 6E 61 71 65 72 69 72 65 66 72 76 67 7D"
                        },
                        {
                            "Type": "text",
                            "text": "The text looks like some hex? Decoded it using hex and got this:"
                        },
                        {
                            "Type": "code",
                            "text": "synt{syvcvgnaqerirefrvg}"
                        },
                        {
                            "Type": "text",
                            "text": "The text above mentions \"ROT\"?"
                        },
                        {
                            "Type": "text",
                            "text": "ROT13 on this and it gives us our flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{flipitandreverseit}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Coin Code",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "We found this image of a coin that belongs to a member of DEADFACE. The image has something to do with the encoded message. We believe the message indicates who this DEADFACE actor wants to target next. Figure out who the target is."
                        },
                        {
                            "Type": "text",
                            "text": "Submit the flag as flag{Target Name} (e.g., flag{Bob's Auto})"
                        },
                        {
                            "Type": "text",
                            "text": "The encoded message reads: Fwpl lsjywl xgj ew oadd tw Smjgjs Hzsjes."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - coin.jpg"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Well TBH, I didn't use the coin image to solve this one."
                        },
                        {
                            "Type": "text",
                            "text": "The text for sure look gibberish but when you put it in a caesar cipher decoder, you get the answer on Right shift 18:"
                        },
                        {
                            "Type": "code",
                            "text": "Next target for me will be Aurora Pharma"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{Aurora Pharma}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Color Me Impressed",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "There have been some encrypted documents being passed around on the Ghost Town forum."
                        },
                        {
                            "Type": "text",
                            "text": "When asked for the password, someone just posted a link to some web color template tool. We don't know what to make of this. Do you?"
                        },
                        {
                            "Type": "text",
                            "text": "Submit the flag as flag{flag_text}."
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Upon checking on the forum we find a conversation \"Chicken's can't fly but these ones do. A LOT\", under which we saw the conversation regarding sharing the password. In response of the password, the user sent this image:"
                        },
                        {
                            "Type": "image",
                            "alt": "image given on the forum",
                            "src": "/images/Writeups/Deadface-2023/Crypto/ColorMeImpressed_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "This is a good one actually."
                        },
                        {
                            "Type": "inline-text",
                            "text": "We see the image is using different color palettes, we open a online color identifier tool such as:"
                        },
                        {
                            "Type": "link",
                            "text": "Color Picker ",
                            "url": "https://imagecolorpicker.com/en"
                        },
                        {
                            "Type": "inline-text",
                            "text": "and get the hex values for all those colors:"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "code",
                            "text": "#476c40 #353548 #237524 #332474 #4f6e33 #536d40 #35680a"
                        },
                        {
                            "Type": "text",
                            "text": "Decoding this hex gives us:"
                        },
                        {
                            "Type": "code",
                            "text": "Gl@55H#u$3$tOn3Sm@5h"
                        },
                        {
                            "Type": "text",
                            "text": "Hence the flag!"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{Aurora Pharma}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Letter Soup",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "We believe we have ran into one of the newest members of DEADFACE while they were waiting for the train. The member seemed to have gotten spooked and stood up suddenly to jump on the train right before the doors shut. They seemed to have gotten away, but dropped this innocent looking word search. I believe this member might be actually a courier for DEADFACE."
                        },
                        {
                            "Type": "text",
                            "text": "Let's solve the word search to decode the mystery message. We believe the message might tell us their next move."
                        },
                        {
                            "Type": "text",
                            "text": "Let's solve the word search to decode the mystery message. We believe the message might tell us their next move."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Deadface_Word_Search.png"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The png file is a simple word search they gave us, upon finding all the words in the word search we were left with a bunch load of letters."
                        },
                        {
                            "Type": "image",
                            "alt": "crossword puzzle given",
                            "src": "/images/Writeups/Deadface-2023/Crypto/LetterSoup_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We combine all those letters into one word and get:"
                        },
                        {
                            "Type": "code",
                            "text": "MSHNHZISHJRMLHAOLYZZOPULPUAOLZBU"
                        },
                        {
                            "Type": "text",
                            "text": "We put this on caesar cipher decoder and get this on Right shift 7:"
                        },
                        {
                            "Type": "code",
                            "text": "FLAGASBLACKFEATHERSSHINEINTHESUN"
                        },
                        {
                            "Type": "text",
                            "text": "Hence our flag!"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{ASBLACKFEATHERSSHINEINTHESUN}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Refill on Soup",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "How could we have missed this?? There were TWO word searches stuck together that the DEADFACE courier dropped. We've already solved the first one, but maybe solving this second word search will help us uncover the secret message they're trying to covertly relay to the other members of DEADFACE. Hopefully, THIS will tell us how they plan to execute their next move."
                        },
                        {
                            "Type": "text",
                            "text": "Submit the flag as flag{TARGETNAME} (e.g., flag{THISISTHEANSWER})"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Deadface_Word_Search_Part_2.png"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Quite the same as the Letter Soup challenge, the png image is a word search which we solve according to the words given:"
                        },
                        {
                            "Type": "image",
                            "alt": "crossword puzzle game",
                            "src": "/images/Writeups/Deadface-2023/Crypto/RefillOnSoup_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "And we are left with the following letters combines into a string:"
                        },
                        {
                            "Type": "code",
                            "text": "NVAVAOLSHZASPULMVYAOLMSHNHUZDLYAOHANVLZPUZPKLAOLIYHJRLAZZAVWNQWKDDEVWZLZTJNTHXSKEADVUCNBVTRKLHSWEEBGBDTHHZAOLFMSFHJYVZZ"
                        },
                        {
                            "Type": "text",
                            "text": "Upon caesar cipher decode on right shift 7 we get:"
                        },
                        {
                            "Type": "code",
                            "text": "GOTOTHELASTLINEFORTHEFLAGANSWERTHATGOESINSIDETHEBRACKETSSTOPGJPDWWXOPSESMCGMAQLDXTWONVGUOMKDEALPXXUZUWMAASTHEYFLYACROSS"
                        },
                        {
                            "Type": "text",
                            "text": "Well the text in between doesn't make much of a sense, but we got our flag at the end, hence:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{ASTHEYFLYACROSS}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Forensics": [
                {
                    "Chall-head": "Tin Balloon",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "We've discovered that DEADFACE was somehow able to extract a fair amount of data from Techno Global Research Industries. We are still working out the details, but we believe they crafted custom malware to gain access to one of TGRI's systems. We intercepted a Word document that we believe mentions the name of the malware, in addition to an audio file that was part of the same conversation. We're not sure what the link is between the two files, but I'm sure you can figure it out!"
                        },
                        {
                            "Type": "text",
                            "text": "Submit the flag as: flag{executable_name}. Example: flag{malware.exe}."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Sequence 01.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Now this is a good one, not that tough but yeah"
                        },
                        {
                            "Type": "text",
                            "text": "The zip file contains 2 files, an audio file and a word document."
                        },
                        {
                            "Type": "text",
                            "text": "When we try to open the audio document, it asks for a password which we don't have??"
                        },
                        {
                            "Type": "text",
                            "text": "The audio when played is a nice 6 minute long song (enjoy the song for a while)"
                        },
                        {
                            "Type": "text",
                            "text": "Challenges including audio files sometimes have some data hidden inside its spectrogram (Spectrogram steganography) so we open up our tool (Sonic Visualizer) and open its spectrogram view:"
                        },
                        {
                            "Type": "image",
                            "alt": "spectogram view of the audio",
                            "src": "/images/Writeups/Deadface-2023/Forensics/TinBalloon_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We scroll through a bit and see this compressed text, zoom in a bit, and we see it clear:"
                        },
                        {
                            "Type": "image",
                            "alt": "compressed text in the spectogram",
                            "src": "/images/Writeups/Deadface-2023/Forensics/TinBalloon_1.PNG"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "code",
                            "text": "Text: Gr33dK1Lzz@11Wh0Per5u3"
                        },
                        {
                            "Type": "text",
                            "text": "We use this text as password for our word document and finally get the name of the malware mentioned in it. Hence our flag"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{Wh1t3_N01Z3.exe}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "What's the Wallet",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Ransomware was recently discovered on a system within De Monne's network courtesy of a DEADFACE member. Luckily, they were able to restore from backups. You have been tasked with finding the Bitcoin wallet address from the provided sample so that it can be reported to the authorities. Locate the wallet address in the code sample and submit the flag as"
                        },
                        {
                            "Type": "text",
                            "text": "flag{wallet_address}."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Bitcoin.txt"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Upon reading the Bitcoin.txt file closely we see this line:"
                        },
                        {
                            "Type": "code",
                            "text": "$global:BtcWalletAddress = [System.Convert]::FromBase64String([System.Text.Encoding]::UTF8.GetBytes('bjMzaGE1bm96aXhlNnJyZzcxa2d3eWlubWt1c3gy'))"
                        },
                        {
                            "Type": "text",
                            "text": "Well as the code says, we Base64 decode the string:"
                        },
                        {
                            "Type": "code",
                            "text": "bjMzaGE1bm96aXhlNnJyZzcxa2d3eWlubWt1c3gy"
                        },
                        {
                            "Type": "text",
                            "text": "and get:"
                        },
                        {
                            "Type": "code",
                            "text": "n33ha5nozixe6rrg71kgwyinmkusx2"
                        },
                        {
                            "Type": "text",
                            "text": "Which doesn't make much sense as a word but does any btc address?"
                        },
                        {
                            "Type": "text",
                            "text": "Hence our flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{n33ha5nozixe6rrg71kgwyinmkusx2}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "OSINT": [
                {
                    "Chall-head": "Dark_Web_Dump",
                    "Chall-cat": "OSINT",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Welcome to challenge 1 in the Track the Hacker Series, a multi-step challenge. You are simulating an attack path as the hacker to take over GlitterCo!"
                        },
                        {
                            "Type": "text",
                            "text": "For this challenge, d34th dumped some data onto GhostTown in a thread about Dark Web Dumps. Use this information to track down the person’s username and password that he left out on the public web! This will require a bit of social media and other websites to track these credentials down, think you can hack it?"
                        },
                        {
                            "Type": "text",
                            "text": "Submit the flag as flag{username:password} (case sensitive)."
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Upon reconning through the forum, we find the link to the Google drive named \"Hacked Stuff\" and found this note (more of a confession letter?) to someone named Lucy. It read:"
                        },
                        {
                            "Type": "code",
                            "text": "Dear Lucy,\nHow do I tell you that I love your sister and not you? You just can't slap the bass like a real bass player.\nOh man, this will never work she won't be able to handle the heart break. Alas, my love will go on....\nI guess I will just keep stalking you on Twitter if Elon doesn't get it shut down.\n\nLove\nOpticSeltzer69"
                        },
                        {
                            "Type": "text",
                            "text": "Well now we know he was stalking her on X and his X handle is OpticSeltzer69, we open up X and find his profile there and a post about a TicTacToe game he made that he posted on his github. Through this get into his github account and find 2 more repositories under his name. In the repository of BrownGlitter we found the code and a line in it, where he had hardcoded his username and password in the program:"
                        },
                        {
                            "Type": "image",
                            "alt": "hardcoded username and password",
                            "src": "/images/Writeups/Deadface-2023/OSINT/DarkWebDump_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Hence our flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{jakeg:MakeitChocolateRain}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "G(L)O Clouds",
                    "Chall-cat": "OSINT",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Alejandro has been seen as an easy mark for DEADFACE. Do a sweep of his social media to see what information DEADFACE was able to gather on Alejandro. Scroll through Alejandro's social media to find out the degree he graduated with, from what school, and in what year."
                        },
                        {
                            "Type": "text",
                            "text": "Submit the flag as: flag{school-initials_degree-program_year}. Example:"
                        },
                        {
                            "Type": "text",
                            "text": "flag{LSU-politicalscience-87}."
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "So we see the discussion on the forum and get Alejandro's facebook profile from there."
                        },
                        {
                            "Type": "text",
                            "text": "Upon scrolling down in his timeline, we see the required information:"
                        },
                        {
                            "Type": "image",
                            "alt": "alejandro's facebook profile",
                            "src": "/images/Writeups/Deadface-2023/OSINT/G(L)OClouds_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Hence our flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{NVU-cybersecurity-23}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Programming": [
                {
                    "Chall-head": "Dead Drop",
                    "Chall-cat": "Programming",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "The Incident Response Team at Aurora Pharmaceuticals recently recovered this file from a user's computer. The artifacts indicate it was accessed by what they believe to be multiple DEADFACE members. The program appears to have set up the user's workstation as a dead drop for DEADFACE members to convert a secret numerical code into a password string for further target access. Our decoding attempts have been unsuccessful, but the script appears to contain a recovery code that may be a good starting point."
                        },
                        {
                            "Type": "text",
                            "text": "Submit the flag as flag{the password} exactly how print_password() returns it."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - deaddrop.py"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Not much of a rocket science actually."
                        },
                        {
                            "Type": "text",
                            "text": "There's a function named left_shift given in the python code and two commented out lines:"
                        },
                        {
                            "Type": "code",
                            "text": "# Password recovery:\n# buA9kvZ=T_A}b[J8l:@ob_tviPZtb_<olOpxkvZ=T_=xju]olOpxkvZ=T_bxlu]olOpxkvZ=QIEE"
                        },
                        {
                            "Type": "text",
                            "text": "Taking a guess, we create a small for loop from 0 to 50 and use the left_shift function with this string above and the number:"
                        },
                        {
                            "Type": "code",
                            "text": "s = \"buA9kvZ=T_A}b[J8l:@ob_tviPZtb_<olOpxkvZ=T_=xju]olOpxkvZ=T_bxlu]olOpxkvZ=QIEE\"\nfor i in range(50):\n    print(left_shift(s,i))"
                        },
                        {
                            "Type": "text",
                            "text": "We notice there are a lot of gibberish strings, but upon looking closely we see a string:"
                        },
                        {
                            "Type": "code",
                            "text": "Zm91cnR5LW9uZSB0d28gZWlnaHRlZW4gdGhpcnR5LW5pbmUgdGhpcnR5LWZpdmUgdGhpcnR5IA=="
                        },
                        {
                            "Type": "text",
                            "text": "Now, there are chances people might skip it because it looks gibberish, but to me it looks like its encoded (probably base64 because of the = sign at the end?)"
                        },
                        {
                            "Type": "text",
                            "text": "We check and we were right and decode it to:"
                        },
                        {
                            "Type": "code",
                            "text": "fourty-one two eighteen thirty-nine thirty-five thirty "
                        },
                        {
                            "Type": "text",
                            "text": "Now, there's an array given in the python program named by 'arr' and another function named 'print_password' which takes a parameter of a integer array and traverse through the main array only on the integers given in the num array, create a string out of those values and print it."
                        },
                        {
                            "Type": "text",
                            "text": "We convert the decoded result we got above into numbers:"
                        },
                        {
                            "Type": "code",
                            "text": "41, 2, 18, 39, 35, 30"
                        },
                        {
                            "Type": "text",
                            "text": "Maybe this is the num array?"
                        },
                        {
                            "Type": "code",
                            "text": "num = [41, 2, 18, 39, 35, 30 ]"
                        },
                        {
                            "Type": "text",
                            "text": "We run the function and got the flag as output:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{the current plan is world domination}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Reverse": [
                {
                    "Chall-head": "Cereal Killer 01",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "How well do you know your DEADFACE hackers? Test your trivia knowledge of our beloved friends at our favorite hactivist collective! We'll start with bumpyhassan. Even though he grates on TheZeal0t a bit, we find him to be absolutely ADORKABLE!!!"
                        },
                        {
                            "Type": "text",
                            "text": "Choose one of the binaries below to test your BH trivia knowlege."
                        },
                        {
                            "Type": "text",
                            "text": "Enter the flag in the format: flag{Ch33ri0z_R_his_FAV}."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Windows and Linux Binaries"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Upon running the linux binary we see it asks us for a input asking about bumpyhassan's favorite morning cereal:"
                        },
                        {
                            "Type": "image",
                            "alt": "running the program",
                            "src": "/images/Writeups/Deadface-2023/Reverse/CerealKiller01_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We open it up in ghidra and here's what we got decompiling the main function"
                        },
                        {
                            "Type": "image",
                            "alt": "decompiled of main function in ghidra",
                            "src": "/images/Writeups/Deadface-2023/Reverse/CerealKiller01_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We're going to focus only on specifically a few lines,"
                        },
                        {
                            "Type": "text",
                            "text": "the line which mentioned the value of local_108c:"
                        },
                        {
                            "Type": "code",
                            "text": "local_108c = \"I&_9a%mx_tRmE4D3DmYw_9fbo6rd_aFcRbE,D.D>Y[!]!\\'!q\";"
                        },
                        {
                            "Type": "text",
                            "text": "and the lines after when the system puts 'You are correct!' which tells the system what operations to perform on the string defined by local_108c."
                        },
                        {
                            "Type": "text",
                            "text": "Upon checking the for function carefully, we see all it does is basically compare the alternate characters in the given gibberish string and putting it on a different string then outputting the string."
                        },
                        {
                            "Type": "text",
                            "text": "So to get the solution, we'll just traverse through the gibberish string through alternate characters and we get this:"
                        },
                        {
                            "Type": "code",
                            "text": "I_am_REDDY_for_FREDDY!!!"
                        },
                        {
                            "Type": "text",
                            "text": "Since this is what the program outputs after the operation, this would be our flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{I_am_REDDY_for_FREDDY!!!}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Cereal Killer 02",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "luciafer can be a bit of trouble sometimes, but she can put away the sugary monster cereals with the best of them! She has a favorite, too, and it is based on her favorite monster. See if you can figure it out! Select the binary for your preferred platform."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Windows and Linux binaries"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "We run the program and its another guess the cereal question."
                        },
                        {
                            "Type": "text",
                            "text": "We decompile the functions using ghidra and see this:"
                        },
                        {
                            "Type": "image",
                            "alt": "decompiled main function using ghidra",
                            "src": "/images/Writeups/Deadface-2023/Reverse/CerealKiller02_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We see this function named 'decode_str' that grabs my interest, and navigate to that function:"
                        },
                        {
                            "Type": "image",
                            "alt": "decode_str function in ghidra",
                            "src": "/images/Writeups/Deadface-2023/Reverse/CerealKiller02_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Now this is easy, we just decode this loop to see what operation it performs and solve the flag"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{GramPa-KRAMpus-Is-Comin-For-Da-Bad-Kids!!!}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Cereal Killer 04",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "lilith is not too old to have a favorite monster / ghoul / daemon / phantasm / poltergeist / creature / extraterrestrial or a favorite sugary breakfast cereal! She also has a favorite programming language (which no one else at DEADFACE likes that much, and they all think she is kinda weird for it). She probably mainly likes it because it was her first language she learned at the age of 9."
                        },
                        {
                            "Type": "text",
                            "text": "See if you can crack her program and figure out what her favorite cereal and entity are."
                        },
                        {
                            "Type": "text",
                            "text": "Enter the answer as flag{LilithLikesMonsterCereal}."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - CenoBytes.jar"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Easier than the previous ones actually, we got a jar file, hence its java, and we used an online java decompiler such as https://www.decompiler.com/ to decompile this program."
                        },
                        {
                            "Type": "image",
                            "alt": "decompiled jar file online",
                            "src": "/images/Writeups/Deadface-2023/Reverse/CerealKiller04_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We see 2 java programs, CenoBytes.java and a Base85.java inside the sheepy/util/text folder."
                        },
                        {
                            "Type": "text",
                            "text": "We just copy these java files into our Eclipse IDE to run it locally."
                        },
                        {
                            "Type": "text",
                            "text": "We notice how the program takes input and performs operations on the hardcoded strings to compare it with the input and just craft our input according to it to get the correct result."
                        },
                        {
                            "Type": "text",
                            "text": "Hence getting our flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{OctoberIsSharkMonth}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Cereal Killer 05",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "We think Dr. Geschichter of Lytton Labs likes to use his favorite monster cereal as a password for ALL of his accounts! See if you can figure out what it is, and keep it handy! Choose one of the binaries to work with."
                        },
                        {
                            "Type": "text",
                            "text": "Enter the answer as flag{WHATEVER-IT-IS}."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Windows and Linux Binaries"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The easiest one actually. We just open it up on ghidra and see this:"
                        },
                        {
                            "Type": "image",
                            "alt": "decompiled function opened in ghidra",
                            "src": "/images/Writeups/Deadface-2023/Reverse/CerealKiller05_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We just craft the local_235 array based on the condition given and get the flag as:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{XENO-DO-DO-DO-DO-DO-DOOOOO}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "My Daily Macros",
                    "Chall-cat": "Reverse",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "DEADFACE has gotten hold of the HR departments contact list and has been distributing it with a macro in it. There is a phrase the RE team would like for you to pull out of the macro."
                        },
                        {
                            "Type": "text",
                            "text": "Submit the flag as flag{some_text}."
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Solved it in more of a forensics fashion lol."
                        },
                        {
                            "Type": "text",
                            "text": "Firstly, there was an excel file in it. We knew there was a macro in it, so we just extract the excel file using binwalk."
                        },
                        {
                            "Type": "text",
                            "text": "Wasn't long when i found the flag hidden inside the xl/vbaProject.bin file"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: flag{youll_never_find_this_}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ]

        }
    },
    {
        "Event-name": "Questcon-2023",
        "Event-logo": "/static/images/Writeups/Questcon-2023/logo.png",
        "Event-timeline": {
            "Start": "27/10/2023",
            "End": "29/10/2023"
        },
        "Event-sections": {
            "Crypto": [
                {
                    "Chall-head": "Riddle of the Hidden Scrolls",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Captain Jack Sparrow, notorious for his cunning wit and love for the sea, intercepted a letter sent by his arch-nemesis, Barbossa."
                        },
                        {
                            "Type": "text",
                            "text": "VUUEV2QGW364QGN3YE:MN16eUGMpaE:La2:VMDty`03>"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "I checked it amongst a cipher identifier and it did not give any good results."
                        },
                        {
                            "Type": "text",
                            "text": "Next i did was xor it amongst different numbers up to 20 and i got these:"
                        },
                        {
                            "Type": "image",
                            "alt": "xor of string with different keys",
                            "src": "/images/Writeups/Questcon-2023/Crypto/RiddleoftheHiddenScrolls_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "All looked useless until we noticed this string on line 4, it kinda looks like encoding?"
                        },
                        {
                            "Type": "text",
                            "text": "Its base64 and we decode it to get:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{D34d_M3n_T3ll_No_T4l3s}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Cryptographic Treasure",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Jack Sparrow has encrypted a secret message using RSA cryptography to protect the location of his hidden treasure."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Cryptographic_Treasure.txt"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The txt file contains a few numbers, n, e and c specifically."
                        },
                        {
                            "Type": "code",
                            "text": "N = 882564595536224140639625987659416029426239230804614613279163\nE = 65537\nC = 164269225538436495685306542268826436068505673594249194166792"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "inline-text",
                            "text": "This is a simple RSA question that can be solved using online decoders such as"
                        },
                        {
                            "Type": "link",
                            "text": "RSA-Decoder",
                            "url": "https://www.dcode.fr/rsa-cipher"
                        },
                        {
                            "Type": "inline-text",
                            "text": "as well. We use it to get the flag:"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{1_HaT3_RS1}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Forensics": [
                {
                    "Chall-head": "Head Jack Sparrow",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Captain got an unknown image...Help him out and inspect the file."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Head_Jack_Sparrow.png"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "We see this looks like a png file although we can't open it :/"
                        },
                        {
                            "Type": "text",
                            "text": "We open it up on a hex editor such as hexed.it and hmmm"
                        },
                        {
                            "Type": "image",
                            "alt": "file opened in hex editor",
                            "src": "/images/Writeups/Questcon-2023/Forensics/HeadJackSparrow_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "The file does not have the correct PNG headers."
                        },
                        {
                            "Type": "text",
                            "text": "I spent an unbelievable amount of time on this question, trying to analyze the bits and what not."
                        },
                        {
                            "Type": "text",
                            "text": "The solution?"
                        },
                        {
                            "Type": "text",
                            "text": "We just replace the starting bytes with the correct bits for the PNG header:"
                        },
                        {
                            "Type": "image",
                            "alt": "fixed the headers",
                            "src": "/images/Writeups/Questcon-2023/Forensics/HeadJackSparrow_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We save it and get an image."
                        },
                        {
                            "Type": "text",
                            "text": "Now the trickiest part, what to do with this image? I did what not trying to figure this out when I finally gave up and sent it to my teammate for him to work on it. AND THAT'S WHEN I NOTICED!"
                        },
                        {
                            "Type": "image",
                            "alt": "image",
                            "src": "/images/Writeups/Questcon-2023/Forensics/HeadJackSparrow_2.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "The flag was written at the bottom of the image :))"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{P1RaT3s_Ha13s_PNG_F1l3}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Isla de Muerta's Secrets",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Intruders have intercepted a suspicious message from a villainous character in Jack Sparrow's crew. The message contains a hidden secret-coordinates related to Isla de Muerta's hidden treasure. Can you find the local address of intruder?"
                        },
                        {
                            "Type": "text",
                            "text": "Wrap you answer with standard flag format: QUESTCON{your answer}"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - intruder.pcapng"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "A .pcapng file hence we open it up on wireshark."
                        },
                        {
                            "Type": "text",
                            "text": "This question is not that difficult to be honest."
                        },
                        {
                            "Type": "text",
                            "text": "We just find the POST request (there is only 1) and we see it contains the form data and there is text data of those coordinates mentioned in the challenge. We need to find the local address of the intruder, hence we just use the IP address the request was made from."
                        },
                        {
                            "Type": "image",
                            "alt": "file opened in hex editor",
                            "src": "/images/Writeups/Questcon-2023/Forensics/IsladeMuerta'sSecrets_0.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{192.168.0.129}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Island of Hidden Bounty",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "\"In a digital realm where mysteries reside,"
                        },
                        {
                            "Type": "text",
                            "text": "An image conceals what you can't deride."
                        },
                        {
                            "Type": "text",
                            "text": "Navigate the web, find the clue to cite,"
                        },
                        {
                            "Type": "text",
                            "text": "Unravel the flag hidden in plain sight.\""
                        },
                        {
                            "Type": "text",
                            "text": "Attached - blackperl.jpg"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "An image in a forensics question? Always check for steganography."
                        },
                        {
                            "Type": "text",
                            "text": "We perform stegseek on it and get a text file which contains a link:"
                        },
                        {
                            "Type": "image",
                            "alt": "file opened in hex editor",
                            "src": "/images/Writeups/Questcon-2023/Forensics/IslandofHiddenBounty_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We head over to the website and see a blank website with a pirate GIF and some text."
                        },
                        {
                            "Type": "text",
                            "text": "The website contains a javascript file but that too is not useful for us."
                        },
                        {
                            "Type": "text",
                            "text": "After some going around, we check the robots.txt file and we see this another page named as:"
                        },
                        {
                            "Type": "code",
                            "text": "/HiddenInMist.html"
                        },
                        {
                            "Type": "text",
                            "text": "We go over to that link and...get the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{X_M4rk5Th3Digit4lTr34sur3}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Misc": [
                {
                    "Chall-head": "Guidelines of the Caribbean",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "\"Yo ho ho! Listen, sea rover so bright,"
                        },
                        {
                            "Type": "text",
                            "text": "In the rule book's words, a hint takes flight."
                        },
                        {
                            "Type": "text",
                            "text": "To find the gold, follow the guide's song,"
                        },
                        {
                            "Type": "text",
                            "text": "The secret's whispered, don't get it wrong.\""
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Well the song leads us towards the rules page, where we can't find any flag (there's one but its a fake flag)"
                        },
                        {
                            "Type": "text",
                            "text": "We inspect the source code of the page and see there's a flag inside a hidden div :))"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{C0d3Break3r_Rul35_Expl0r3r}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Hexa Pirate's Code",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Set sail on a digital adventure as you uncover the ancient Pirate's Code. The code is shrouded by Hexa, a language known to only the savviest of pirates. Can you decode the hidden message and claim your prize?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - Hexa_Pirates_Code.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "The zip file contains a lot of files with weird names, all hex coded or something?"
                        },
                        {
                            "Type": "text",
                            "text": "We try to decode the file names but get nothing good. We open a random file to see there's some sort of script written."
                        },
                        {
                            "Type": "text",
                            "text": "If we open other files and look closely, we'll notice almost all files have the same thing written in it, EXCEPT, this one line i noticed and it looks interesting:"
                        },
                        {
                            "Type": "image",
                            "alt": "the different line in all codes",
                            "src": "/images/Writeups/Questcon-2023/Misc/HexaPirate'sCode_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We use grep to extract this line from all the files and get:"
                        },
                        {
                            "Type": "image",
                            "alt": "same line from all the codes",
                            "src": "/images/Writeups/Questcon-2023/Misc/HexaPirate'sCode_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Our intuition was right, the pass is compared to different strings in different files."
                        },
                        {
                            "Type": "text",
                            "text": "Now all the strings look hex encoded but when decoded reveals nothing sensible :/"
                        },
                        {
                            "Type": "text",
                            "text": "Except, this one line which looks different from other lines:"
                        },
                        {
                            "Type": "image",
                            "alt": "different string among the different codes",
                            "src": "/images/Writeups/Questcon-2023/Misc/HexaPirate'sCode_2.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We decode this hex string to get our flag which would be:"
                        },
                        {
                            "Type": "image",
                            "alt": "hex decoded in cyberchef",
                            "src": "/images/Writeups/Questcon-2023/Misc/HexaPirate'sCode_3.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{Bl4ckB34rd_Malw4r3_Pir4t3s}"
                        },
                        {
                            "Type": "text",
                            "text": "This could be considered as luck maybe? That I considered looking for all the passwords the files were checking for? But yeah it took me a lot of time to actually reach this conclusion."
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Pirate's Port Paradox",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "The mysterious seas of network ports."
                        },
                        {
                            "Type": "text",
                            "text": "Your flag: ((((WHOIS + QOTD) * CHARGEN) - XFER) % ECHO) * (DCE + NNTP) * NSCA"
                        },
                        {
                            "Type": "text",
                            "text": "Wrap you answer with standard flag format: QUESTCON{your answer}"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Quite easy actually, just google the different port numbers associated with the mentioned services and solve the equation."
                        },
                        {
                            "Type": "code",
                            "text": "WHOIS - 43\nQOTD - 17\nCHARGEN - 19\nXFER - 82\nECHO - 7\nDCE - 135\nNNTP - 119\nNSCA - 5667"
                        },
                        {
                            "Type": "text",
                            "text": "Can you imagine i actually performed a nmap scan on the main website thinking maybe they're talking about the ports they have hosted these services on lol"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{872718}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Stego": [
                {
                    "Chall-head": "Mystery",
                    "Chall-cat": "Stego",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Hidden within this image is a concealed message, waiting to be unraveled. The key to unlock the mystery lies in the heart of our theme. Can you discover the hidden treasure without a password?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - pirate.jpg"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "We see a jpg in a steganography challenge and head up to use stegseek and get successful with getting another image pirate.jpg.out."
                        },
                        {
                            "Type": "image",
                            "alt": "Stegseek performed on the image",
                            "src": "/images/Writeups/Questcon-2023/Stego/Mystery_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We use exiftool on this image to get this Image unique ID:"
                        },
                        {
                            "Type": "image",
                            "alt": "exiftool on the image",
                            "src": "/images/Writeups/Questcon-2023/Stego/Mystery_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Base64 decode that and we get our flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{My5t3ry_1s_4w3s0me!}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Mystery 2.0",
                    "Chall-cat": "Stego",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Another mystery!"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - another_mystery.png"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "PNG image so we can't use stegseek :(("
                        },
                        {
                            "Type": "text",
                            "text": "No worries, we use the other tool \"zsteg\""
                        },
                        {
                            "Type": "text",
                            "text": "That's all!"
                        },
                        {
                            "Type": "image",
                            "alt": "zsteg on the image revealing the flag",
                            "src": "/images/Writeups/Questcon-2023/Stego/Mystery2.0_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "The zsteg tool is used to look for hidden messages in the Least Significant Bytes (LSB) of the document. A very common method to hide secret messages in steganography."
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{P1raT3s_Ar3_M7s!3rY}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Web": [
                {
                    "Chall-head": "Cursed Treasure",
                    "Chall-cat": "Web",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Captain Barbossa, sly and cunning, held the cursed treasure away from Jack Sparrow's reach."
                        },
                        {
                            "Type": "text",
                            "text": "Can you unveil the hidden flag and claim the cursed riches?"
                        },
                        {
                            "Type": "text",
                            "text": "https://questcon-cursed-treasure.chals.io/"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "We notice we're given three maps to choose from. We click on any map and it redirects us to a page. What's important to notice here is the id parameter in the URL."
                        },
                        {
                            "Type": "text",
                            "text": "For the three maps we see these respectively:"
                        },
                        {
                            "Type": "code",
                            "text": "Id = e25388fde8290dc286a6164fa2d97e551b53498dcbf7bc378eb1f178\nId = 58b2aaa0bfae7acc021b3260e941117b529b2e69de878fd7d45c61a9\nId = 271f93f45e9b4067327ed5c8cd30a034730aaace4382803c3e1d6c2f"
                        },
                        {
                            "Type": "text",
                            "text": "It looks like hex, but it was giving us weird values, maybe it's some sort of hash?"
                        },
                        {
                            "Type": "text",
                            "text": "We use an online hash cracker such as crackstation.net to crack that and we realize we were right. The id's were sha224 hashes of 1,2 and 4 respectively. But wait, where's 3 then?"
                        },
                        {
                            "Type": "text",
                            "text": "Maybe the 3rd page is the hidden page where we need to reach. We create a sha224 of 3 which is:"
                        },
                        {
                            "Type": "code",
                            "text": "4cfc3a1811fe40afa401b25ef7fa0379f1f7c1930a04f8755d678474"
                        },
                        {
                            "Type": "text",
                            "text": "We used this value with our id parameter in the URL and it leads us to a page saying"
                        },
                        {
                            "Type": "text",
                            "text": "Congratulations and asking us to verify our identity."
                        },
                        {
                            "Type": "text",
                            "text": "Ummm, the question mentions that Captain Carbossa hid the treasure, maybe that's the identity they're talking about?"
                        },
                        {
                            "Type": "text",
                            "text": "We enter \"Barbossa\" and it greets us with the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{Th3_Pir4t3s_0f_Th3_Car1bb34n_Arr_Th3_B3st!}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Pirate's Hidden Treasure",
                    "Chall-cat": "Web",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "A legendary treasure chest, rumored to be enchanted by Captain Jack Sparrow himself, awaits your discovery. But beware, for only those with the heart of a true pirate, much like Captain Jack, shall unlock its secrets and claim the treasure within."
                        },
                        {
                            "Type": "text",
                            "text": "https://questcon-pirate-treasure.chals.io/"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "This was an interesting challenge, wherein there were three levels of authentication required to access the \"hidden treasure\" (the flag lol)."
                        },
                        {
                            "Type": "text",
                            "text": "The first two were not that difficult but the last one it took me hours to solve (just because i was being dumb)"
                        },
                        {
                            "Type": "text",
                            "text": "For the first level the website gives us the text:"
                        },
                        {
                            "Type": "text",
                            "text": "You should have a pirate browser to access this site!"
                        },
                        {
                            "Type": "text",
                            "text": "Hmmm, it's a web challenge so something to do with the http request? We set the header:"
                        },
                        {
                            "Type": "code",
                            "text": "User-Agent: pirate browser"
                        },
                        {
                            "Type": "text",
                            "text": "and send the request again, boom! We see a different text now:"
                        },
                        {
                            "Type": "text",
                            "text": "You should come from the ship Black Perl to access this treasure!"
                        },
                        {
                            "Type": "text",
                            "text": "So the http header modification works, i guess it'll work for this one too?"
                        },
                        {
                            "Type": "code",
                            "text": "Referer: Black Perl"
                        },
                        {
                            "Type": "text",
                            "text": "This worked as well, we now get the text to identify ourself? We notice there's a cookie set:"
                        },
                        {
                            "Type": "code",
                            "text": "user=barbossa"
                        },
                        {
                            "Type": "text",
                            "text": "What if we have to change the user to the required use to authenticate?"
                        },
                        {
                            "Type": "text",
                            "text": "According to the question it should be something similar to Captain Jack Sparrow or something."
                        },
                        {
                            "Type": "text",
                            "text": "I tried putting all combinations and wasted hours figuring out what it could possibly be, just to find it later and realize, that i wasn't using all lowercase in the user cookie :))"
                        },
                        {
                            "Type": "text",
                            "text": "We set the cookie user=captain jack"
                        },
                        {
                            "Type": "text",
                            "text": "...and get our flag!"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{Thr33_k33p_a_s3cr3t_if_2_of_th3m_ar3_dead}"
                        },
                        {
                            "Type": "text",
                            "text": "It can also be done by using curl with the command:"
                        },
                        {
                            "Type": "code",
                            "lang": "cmd",
                            "text": "curl -H \"User-Agent: pirate browser\" -H \"Referer: Black Perl\" -H \"Cookie: user=jack sparrow\" https://questcon-pirate-treasure.chals.io/"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Web Explorer's Journey",
                    "Chall-cat": "Web",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Ahoy, matey! a bottle of code! Captain Jack Sparrow has hidden his secret pirate flag using the ancient JavaScript Cipher. It's your duty to decipher the code and uncover the hidden treasure, savvy?"
                        },
                        {
                            "Type": "text",
                            "text": "https://web-explorer.netlify.app"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Easiest web challenge in this CTF I'd say. We were given the encoded flag as:"
                        },
                        {
                            "Type": "code",
                            "text": "81856983846779781238751669551888076488251829549839552875183487751125"
                        },
                        {
                            "Type": "text",
                            "text": "And the question says that it is encoded using javascript cipher? We inspected the page and saw a javascript file there which basically explained how the encoded flag was created."
                        },
                        {
                            "Type": "text",
                            "text": "It is basically character codes of every character of the flag appended together in a string."
                        },
                        {
                            "Type": "text",
                            "text": "Separating all those characters would get us:"
                        },
                        {
                            "Type": "code",
                            "text": "81 85 69 83 84 67 79 78 123 87 51 66 95 51 88 80 76 48 82 51 82 95 49 83 95 52 87 51 83 48 77 51 125"
                        },
                        {
                            "Type": "text",
                            "text": "Translate these decimal values into characters and we get the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: QUESTCON{W3B_3XPL0R3R_1S_4W3S0M3}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ]
        }
    },
    {
        "Event-name": "SpookyCTF-2023",
        "Event-logo": "/static/images/Writeups/SpookyCTF-2023/logo.png",
        "Event-timeline": {
            "Start": "28/10/2023",
            "End": "29/10/2023"
        },
        "Event-sections": {
            "bin": [
                {
                    "Chall-head": "String Theory",
                    "Chall-cat": "bin",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "I recieved this very weird email that only contained a file called \"openme\", it looks like an executable."
                        },
                        {
                            "Type": "text",
                            "text": "Can you see if there is anything weird in this file?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - openme"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Easy question, we just run the strings command on it with grep to find the possible flag:"
                        },
                        {
                            "Type": "image",
                            "alt": "strings command on the file, leaking the flag",
                            "src": "/images/Writeups/SpookyCTF-2023/bin/StringTheory_0.PNG"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{leaky_data_huh}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Crypto": [
                {
                    "Chall-head": "If the key fits...",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "I am trying to escape this 64-story horror house and the only way to escape is by finding the flag in this text file! Can you help me crack into the file and get the flag? The only hint I get is this random phrase:"
                        },
                        {
                            "Type": "text",
                            "text": "MWwwdjM1eW1tM3RyMWNrM3Q1ISEh"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - flag.txt.aes"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "According to the hint, there's a specific software that might help us with decrypting this. Reading this at once told me we needed to download the aes crypt open software. We opened the file using it, entered the \"random phrase\" given above as the password and it gave us the..."
                        },
                        {
                            "Type": "text",
                            "text": "It gave us the incorrect password alert :/"
                        },
                        {
                            "Type": "text",
                            "text": "We check the random phrase through a cipher decoder and realized the actual password was base64 encoded :)))"
                        },
                        {
                            "Type": "text",
                            "text": "Decoded it to get \"1l0v35ymm3tr1ck3t5!!!\" and used this password to open the aes file and finally got the flag.txt file which had the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{1-4m-k3yn0ugh!}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "What have we found here...",
                    "Chall-cat": "Crypto",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "As the sun dipped below the horizon, casting long shadows across the barren landscape, I stood alone at the edge of the world. The map had brought me here, to this remote and desolate place, in pursuit of a mystery that had captivated the world's greatest minds."
                        },
                        {
                            "Type": "text",
                            "text": "A cryptic message had been found on the ground, a message from the cosmos itself, or so it seemed. It hinted at the existence of extraterrestrial life, hidden within the depths of space. The message, a series of seemingly random characters, held secrets that could change everything we knew about the universe."
                        },
                        {
                            "Type": "text",
                            "text": "My task was to decipher it, to unlock its hidden meaning. The characters appeared to be encoded in a complex language, something that I cannot seem to figure out. The key to understanding lay within those symbols, like a cosmic puzzle waiting to be solved."
                        },
                        {
                            "Type": "text",
                            "text": "As I gazed up at the starry night sky, seeing the Leo Minor constellation in the sky, I knew that the fate of humanity rested on my ability to decode this enigmatic message, to uncover the truth hidden within the stars."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - found_notes.txt"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Just copying and pasting the whole text in cyberchef will tell us its base64 encoding of an image data. We decrypt it, download the image and see the flag written in plaintext on the image."
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{just_chillin}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Forensics": [
                {
                    "Chall-head": "abducted",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "I was going to just give you this flag, but the alien mothership downloaded it and deleted it from my computer!"
                        },
                        {
                            "Type": "text",
                            "text": "We managed to get a snapshot of their mothership before it got away but it's in some weird proprietary format, can you find the flag they stole?"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "Primary Download Link: Download Here: 'https://drive.google.com/file/d/17DR9apPD9_6WRnwRgssEnQeNvzGdAY3p/view?usp=sharing'"
                        },
                        {
                            "Type": "text",
                            "text": "Alternative Download Link: Download Here: 'https://drive.google.com/file/d/1NjozKNHIJpE-YZXQu3GPPGaJIBU8dsST/view?usp=sharing'"
                        },
                        {
                            "Type": "text",
                            "text": "Alternative Split Archive Download Link: (All are required)"
                        },
                        {
                            "Type": "text",
                            "text": "https://krakenfiles.com/view/ofPAlvTaFa/file.html"
                        },
                        {
                            "Type": "text",
                            "text": "https://krakenfiles.com/view/0i0rQc5DMK/file.html"
                        },
                        {
                            "Type": "text",
                            "text": "https://krakenfiles.com/view/fpVnky7FTF/file.html"
                        },
                        {
                            "Type": "text",
                            "text": "https://krakenfiles.com/view/pYENIUwkPc/file.html"
                        },
                        {
                            "Type": "text",
                            "text": "https://krakenfiles.com/view/gDslSOv2Iz/file.html"
                        },
                        {
                            "Type": "text",
                            "text": "https://krakenfiles.com/view/S06syAzD1s/file.html"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "So we're given a logical image, and our task is to analyze the file. We're going to use the tool FTKImager to check this file. We just click on File > Add Evidence Item and enter the source of the image File. Here's how it looks once opened:"
                        },
                        {
                            "Type": "image",
                            "alt": "opened the file on ftkimager",
                            "src": "/images/Writeups/SpookyCTF-2023/Forensics/abducted_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Now according to the question the mothership downloaded the file, so we go to the Users > mothership > Downloads and see this file:"
                        },
                        {
                            "Type": "image",
                            "alt": "Downloads folder containing the flag.jpg file",
                            "src": "/images/Writeups/SpookyCTF-2023/Forensics/abducted_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "The flag.jpg contains the flag in it which is:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{15_TH15_C0N51D3R3D_4_R3C4PTUR3D_FL4G_N0W?}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Don't stick me there",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "I woke up after a night out and I'm hurting uh... everywhere... I think I left my phone at one of the bars we were at last night. Thankfully, I was able to see the last photo I took through the cloud."
                        },
                        {
                            "Type": "text",
                            "text": "Can you help me find my phone? I need to know the name of the bar and when the photo was taken."
                        },
                        {
                            "Type": "text",
                            "text": "flagformat: NICC{Bar_Name-HH:MM:SS}"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - lastphoto.png"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "We extract the metadata of the image, for this purpose we're going to use the exiftool in linux"
                        },
                        {
                            "Type": "text",
                            "text": "Here's what we got:"
                        },
                        {
                            "Type": "image",
                            "alt": "exiftool on the image",
                            "src": "/images/Writeups/SpookyCTF-2023/Forensics/Don'tstickmethere_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "I meant, this is what we're going to focus on, it gives us the coordinates to a bar named: \"The Anchored Inn\" and the time of creation is given as \"03:47:12\", hence the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{The_Anchored_Inn-03:47:12}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Down the Wormhole",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "An explosive chase with a UFO led us to a wormhole!"
                        },
                        {
                            "Type": "text",
                            "text": "Make sure you have your bases covered before you head in and find the secrets hiding inside!"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - wormhole.jpg"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "This one was a multi step challenge and it was fun solving this."
                        },
                        {
                            "Type": "text",
                            "text": "Firstly we perform exiftool on it to get this data:"
                        },
                        {
                            "Type": "image",
                            "alt": "exiftool on the image",
                            "src": "/images/Writeups/SpookyCTF-2023/Forensics/DowntheWormhole_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We decode this comment to get:"
                        },
                        {
                            "Type": "code",
                            "text": "password: diggingdeeper"
                        },
                        {
                            "Type": "text",
                            "text": "Okay...now this password could be used for anything, but since we don't have much to go with, maybe it has to go with the image? We use this password with steghide and see there was a file hidden in it:"
                        },
                        {
                            "Type": "image",
                            "alt": "using steghide on the image with the extracted password",
                            "src": "/images/Writeups/SpookyCTF-2023/Forensics/DowntheWormhole_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "The content of next.txt read as follows:"
                        },
                        {
                            "Type": "image",
                            "alt": "the content of the next.txt file",
                            "src": "/images/Writeups/SpookyCTF-2023/Forensics/DowntheWormhole_2.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Heading over to the website, on one look there's nothing much to it. We open developer tools and scroll down a bit to reveal a comment:"
                        },
                        {
                            "Type": "image",
                            "alt": "the comment on the html page",
                            "src": "/images/Writeups/SpookyCTF-2023/Forensics/DowntheWormhole_3.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We copy this weird string in cyberchef and see that it is base32 text of a whole zip file, damn!"
                        },
                        {
                            "Type": "text",
                            "text": "We download the zip file and extract it to see that there's a file named secrets666.zip.bz2. If we open it we'll see more zips in it. Now I've solved this type of question before. It basically requires you to create a bash script to unzip the zip files. I analyzed the different zips used to craft my bash script:"
                        },
                        {
                            "Type": "code",
                            "lang": "bash",
                            "text": "#!/bin/bash\n\nfor ((i=666 ; i >=1 ; i--));\ndo\n  gzip -d secrets${i}.zip.bz2.gz\n  bzip2 -d secrets${i}.zip.bz2\n  unzip secrets${i}.zip\n  rm -rf secrets${i}.zip\ndone"
                        },
                        {
                            "Type": "text",
                            "text": "In about less than 5 minutes, it solved all my trouble and handed me the flag.txt file which read:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{TH3-UF0S-4R3-UP-N0T-D0WN-50-WHY-4R3-Y0U-D0WN-H3R3}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Halloween Masks Are Overrated",
                    "Chall-cat": "Forensics",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "My friend who is into aliens, has been acting weird lately."
                        },
                        {
                            "Type": "text",
                            "text": "Ever since he learned about some weird technique musicians used in the 1980s, he has been losing his mind."
                        },
                        {
                            "Type": "text",
                            "text": "The last message he sent me was this image of an alien mask, it might one of the masks from his big halloween mask collection."
                        },
                        {
                            "Type": "text",
                            "text": "Can see if there is anything in this image he sent me?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - mask.jpg"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "We first binwalk the image and see there's a zip archive in it with flag.mp3 file. We extract it using binwalk:"
                        },
                        {
                            "Type": "image",
                            "alt": "extracting using binwalk a audio file hidden inside the image",
                            "src": "/images/Writeups/SpookyCTF-2023/Forensics/HalloweenMasksAreOverrated_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We hear the audio and it looks like a reverse audio, so we use an online tool to reverse it back."
                        },
                        {
                            "Type": "text",
                            "text": "If we listen closely to the audio, there's a heavy voice spelling the flag encrypted with caesar cipher. We decode it and get the flag:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{B4CKM4SKING_IS_COOOL}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Misc": [
                {
                    "Chall-head": "Insecure Protocols",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "I just spun up my first website with a login page and everything! My friend tells me my page isn't secure and I'm not sure why."
                        },
                        {
                            "Type": "text",
                            "text": "Attached - insecure.pcapng"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Basic traffic analysis actually, we open the .pcapng file on the wireshark as the first step."
                        },
                        {
                            "Type": "text",
                            "text": "If we open up protocol hierarchy we'll see the different types of packets that were captured:"
                        },
                        {
                            "Type": "image",
                            "alt": "protocol hierarchy of the given pcapng file",
                            "src": "/images/Writeups/SpookyCTF-2023/Misc/InsecureProtocols_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "In this what grabbed my attention was the HTTP data sent, especially the HTML form data. As the question talks about website with login page i figured this is where the vulnerability would probably be. We open up that specific packet and see the flag as the uname parameter:"
                        },
                        {
                            "Type": "image",
                            "alt": "HTML form data showing the flag",
                            "src": "/images/Writeups/SpookyCTF-2023/Misc/InsecureProtocols_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "Hence the flag!"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{h77p_15_1n53cur3}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Needle In a Haystack",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "I lost my flag and I can't seem to find it. I know I put it in this folder, but it is not showing up."
                        },
                        {
                            "Type": "text",
                            "text": "Can you help me find it?"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - haystack.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Not much to do here, we just use the command:"
                        },
                        {
                            "Type": "code",
                            "text": "strings * | grep \"NICC{\""
                        },
                        {
                            "Type": "text",
                            "text": "and we got the flag:"
                        },
                        {
                            "Type": "image",
                            "alt": "strings command on the all  the files",
                            "src": "/images/Writeups/SpookyCTF-2023/Misc/NeedleInaHaystack_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "(Actually if you'll notice, you'll see a file named flag.txt.txt which had the flag lol, no need for commands and stuff)"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{th4t_w45_345y}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "shapeshifter",
                    "Chall-cat": "Misc",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "There's this figure in front of me, but I can't even figure out what it is! What is that thing??"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - distant-figure.png"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "We're given a png file, but umm, it wasn't opening? When I viewed it on hexed.it i noticed it did not contain the correct PNG headers, maybe it was a file of some other format? We use the file command to check the type of file it is:"
                        },
                        {
                            "Type": "image",
                            "alt": "file command showing that the png given is actually a zip",
                            "src": "/images/Writeups/SpookyCTF-2023/Misc/shapeshifter_0.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "It's a zip, so we're gonna unzip"
                        },
                        {
                            "Type": "text",
                            "text": "We see a true-form.exe in it but i don't believe it, we use the file command again and notice it's  a RTF file:"
                        },
                        {
                            "Type": "image",
                            "alt": "file command showing that the exe given is actually a RTF file",
                            "src": "/images/Writeups/SpookyCTF-2023/Misc/shapeshifter_1.PNG"
                        },
                        {
                            "Type": "text",
                            "text": "We use MS word to open it up and see the flag hidden in white font color:"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{Y0U_F0UND_MY_TRU3_F0RM}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ],
            "Web": [
                {
                    "Chall-head": "Dig Up Their Bones",
                    "Chall-cat": "Web",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "That blog seems suspicious and I bet that there's more to it than meets the eye."
                        },
                        {
                            "Type": "text",
                            "text": "See if you can dig up anything about the owner of the site?"
                        },
                        {
                            "Type": "text",
                            "text": "You'll know what you're looking for once you find it."
                        },
                        {
                            "Type": "text",
                            "text": "https://niccgetsspooky.xyz/"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Well the easier way to do it would be through using the dig command in linux, but there's another way to do it, through manually searching for the pieces of flag spread all across the website. The way i did :)))"
                        },
                        {
                            "Type": "text",
                            "text": "Fidgeting through the website, trying on every button and input box, I got the 1st part of the flag lol clicking on a button."
                        },
                        {
                            "Type": "text",
                            "text": "Going through the source code only will give you the 4th and the 5th part of the flag."
                        },
                        {
                            "Type": "text",
                            "text": "Opening the console, you can see multiple lines of text printed, there you'll find the 3rd part of the flag as well."
                        },
                        {
                            "Type": "text",
                            "text": "I went through the javascript file and searched the word \"flag\" through all the css files, but that's how far I was able to reach when my other teammate told me about the 2nd part. It was hidden in a bootstraps.css file by the name \"flg\" lol :')"
                        },
                        {
                            "Type": "code",
                            "text": " .flg-txt-pt2{\n     value: '_c@n_b3_tr1';\n  }"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{gh0sts_c@n_b3_tr1cky_2_s33_bu7_n0t_1f_yr3_2_l00k!}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                },
                {
                    "Chall-head": "Jasons Baking Services",
                    "Chall-cat": "Web",
                    "Chall-soln": [
                        {
                            "Type": "heading",
                            "text": "Challenge:"
                        },
                        {
                            "Type": "text",
                            "text": "Hey intern! We were able to swipe Jasons application from Github, see if you can find anything useful in the code that will allow you to exploit the real application."
                        },
                        {
                            "Type": "text",
                            "text": "(Be ready to be flash-banged, the web-app is all white!)"
                        },
                        {
                            "Type": "text",
                            "text": "https://spooky-jason-bakeshop-web.chals.io/"
                        },
                        {
                            "Type": "text",
                            "text": "Attached - jason-bakeshop-src.zip"
                        },
                        {
                            "Type": "heading",
                            "text": "Approach:"
                        },
                        {
                            "Type": "text",
                            "text": "Inspecting the file contents and the website, we see there's a route to /flag but it prints the flag only if the user is an admin else it redirects to the dashboard."
                        },
                        {
                            "Type": "text",
                            "text": "We see that the program is using JWT to verify the data, but wait, the process.env file is given? and it contains the secret key?? Never leak your secret keys!"
                        },
                        {
                            "Type": "text",
                            "text": "This is what made the challenge easy."
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "text",
                            "text": "We first register a fake user and try to open the /flag but obviously, we ended up on the dashboard page."
                        },
                        {
                            "Type": "text",
                            "text": "We open the network tab in developer tools and see the request made, as expected we see a cookie token=<JWTtoken>"
                        },
                        {
                            "Type": "inline-text",
                            "text": "We use the online tool "
                        },
                        {
                            "Type": "link",
                            "text": "JWT",
                            "url": "https://jwt.io/"
                        },
                        {
                            "Type": "inline-text",
                            "text": " to check the JWT token and enter the secret key given in the process.env file."
                        },
                        {
                            "Type": "text",
                            "text": "We see that the admin parameter is set to false. We change it to true and copy the new generated jwt encoded data."
                        },
                        {
                            "Type": "text",
                            "text": "Now this is new token we're going to use to get ourselves admin privileges and finally accessing the flag page. You can confirm this by using cyberchef as well, by using JWT verify to see if the new encoded data you created will really give you the permission or not."
                        },
                        {
                            "Type": "text",
                            "text": "We create a new request and set the Cookie: token=<our crafted token> and send a request to the /flag page, finally getting our flag as response :)))"
                        },
                        {
                            "Type": "heading",
                            "text": "Flag: NICC{jWoT_tOkeNs_nEed_saf3_secr3ts}"
                        },
                        {
                            "Type": "break"
                        },
                        {
                            "Type": "signature",
                            "text": "Satyam Negi"
                        },
                        {
                            "Type": "signature",
                            "text": "{G4170nd3}"
                        }
                    ]
                }
            ]
        }
    }
]